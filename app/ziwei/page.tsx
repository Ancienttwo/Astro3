"use client";

import React, { useCallback, useEffect, useRef, useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Solar } from 'lunar-typescript';
import { User, Sparkles, Save, BarChart, Eye, Star, Clock, Bot, RefreshCw, Brain, Book, ArrowLeft, Lightbulb, ChevronDown } from 'lucide-react';
import type { RecordData } from '@/types/legacy';
import ZiweiChartWithConnections from '@/components/ZiweiChartWithConnections';
import { FIVE_TIGER_DUN } from '@/lib/zodiac/five-tiger-dun';
import { HeavenlyStem, HEAVENLY_STEMS, STEM_YIN_YANG } from '@/lib/zodiac/stems';
import { EARTHLY_BRANCHES, EarthlyBranch } from '@/lib/zodiac/branches';
import { getFiveElementsBureau, FiveElementsBureau, BUREAU_TO_NUMBER } from '@/lib/zodiac/five-elements-bureau';
import DecadeSelector from '@/components/DecadeSelector';
import YearlyLuckSelector from '@/components/YearlyLuckSelector';
import { getZiweiPosition } from '@/lib/zodiac/ziwei-position';
import { StarName, StarBrightness, StarType, STARS, getStarBrightness } from '@/lib/zodiac/stars';
import { SIHUA_MAP, HUA_TO_LETTER } from '@/lib/zodiac/sihua';
// @ts-ignore - Suppress module not found error for next/navigation
import { useRouter, useSearchParams } from 'next/navigation';
import { useDailyCheckin } from '@/hooks/useDailyCheckin';
import TimeAdjustmentButton from '@/components/TimeAdjustmentButton';
import { MAIN_STARS_INTERPRETATIONS } from '@/lib/data/main-stars';
import { getSihuaInterpretation } from '@/lib/data/sihua-interpretations-complete';
import { PurchaseDialog } from '@/components/PurchaseDialog';
import { StreamingAnalysisCard } from '@/components/StreamingAnalysisCard';
import SimpleAsyncAnalysis from '@/components/SimpleAsyncAnalysis';
import { supabase } from '@/lib/supabase';
import LaiYinAnalysis from '@/components/ziwei/LaiYinAnalysis';
import MingGongAnalysisMultilang from '@/components/ziwei/MingGongAnalysisMultilang';
import { useZiweiStore, useZiweiActions, selectIsFormValid, selectHasResult, selectShowMenu, selectIsCalculating, selectCalculationError } from '@/stores/ziwei-store';
import SmartLayout from '@/components/SmartLayout';
import { apiClient } from '@/lib/api-client';
import { 
  PALACE_NAMES, 
  CATEGORIES as categories
} from '@/lib/ziwei/utils';


const ENGLISH_PALACE_NAMES = [
  "Life", "Siblings", "Marriage", "Children", "Wealth", "Health",
  "Travel", "Friends", "Career", "Property", "Fortune", "Parents"
];

const ENGLISH_DECADE_PALACE_NAMES = ["Â§ßÂëΩ", "Â§ßÂÖÑ", "Â§ßÂ§´", "Â§ßÂ≠ê", "Â§ßË¥¢", "Â§ßÁñæ", "Â§ßËøÅ", "Â§ßÂèã", "Â§ßÂÆò", "Â§ßÁî∞", "Â§ßÁ¶è", "Â§ßÁà∂"];

const ENGLISH_YEARLY_PALACE_NAMES = ["ÊµÅÂëΩ", "ÊµÅÂÖÑ", "ÊµÅÂ§´", "ÊµÅÂ≠ê", "ÊµÅË¥¢", "ÊµÅÁñæ", "ÊµÅËøÅ", "ÊµÅÂèã", "ÊµÅÂÆò", "ÊµÅÁî∞", "ÊµÅÁ¶è", "ÊµÅÁà∂"];

const LUNAR_MONTH_NAMES = ["Ê≠£Êúà", "‰∫åÊúà", "‰∏âÊúà", "ÂõõÊúà", "‰∫îÊúà", "ÂÖ≠Êúà", "‰∏ÉÊúà", "ÂÖ´Êúà", "‰πùÊúà", "ÂçÅÊúà", "ÂÜ¨Êúà", "ËÖäÊúà"];

// ÊµÅÊúàËÆ°ÁÆóÔºöÈÄöËøáÂú∞ÊîØÂä®ÊÄÅÊü•ÊâæÂØÖÂÆ´ÔºåÊó†ÈúÄÂõ∫ÂÆöÁ¥¢Âºï

export interface StarData {
  name: StarName;
  brightness: StarBrightness;
  type: StarType;
  sihua?: 'A' | 'B' | 'C' | 'D';
  palaceHua?: string[];
  xiangXinSihua?: string; // ÂêëÂøÉËá™Âåñ
  liXinSihua?: string; // Á¶ªÂøÉËá™Âåñ
}

export interface PalaceData {
  id: number;
  name: string;
  branch: EarthlyBranch;
  heavenlyStem: HeavenlyStem;
  isLaiYinPalace: boolean;
  isShenGong: boolean;
  decade: string; // e.g., "6-15"
  decadeIndex: number;
  fiveElementsBureau?: FiveElementsBureau;
  yearlyLuck?: { year: number; age: number; flowName?: string };
  yearlyName?: string;
  stars?: StarData[];
  lunarMonth?: string;
  isCurrentMonth?: boolean;
}

interface ZiweiResult {
  palaces: PalaceData[];
  basePalaces: PalaceData[];
  decadePalaces: PalaceData[];
  lunarDate: string;
  fiveElementsBureau?: FiveElementsBureau;
  mingZhu: string;
  shenZhu: string;
  gender: 'male' | 'female';
  selectedIndex: number | null;
  yearGan: HeavenlyStem; // Ê∑ªÂä†Âπ¥Âπ≤Â≠óÊÆµ
  sihuaInfo?: { // üî• Ê∑ªÂä†È¢ÑËÆ°ÁÆóÁöÑÁîüÂπ¥ÂõõÂåñ‰ø°ÊÅØ
    lu: string;
    quan: string;
    ke: string;
    ji: string;
  } | null;
}

interface BirthData {
  username: string;
  year: string;
  month: string;
  day: string;
  hour: string;
  gender: 'male' | 'female' | '';
  category: string;
}

const getMingZhu = (lifePalaceBranch: EarthlyBranch): StarName => {
  const map: Record<EarthlyBranch, StarName> = {
    'Â≠ê': 'Ë¥™Áãº', '‰∏ë': 'Â∑®Èó®', 'ÂØÖ': 'Á¶ÑÂ≠ò', 'ÂçØ': 'ÊñáÊõ≤',
    'Ëæ∞': 'ÂªâË¥û', 'Â∑≥': 'Ê≠¶Êõ≤', 'Âçà': 'Á†¥ÂÜõ', 'Êú™': 'Ê≠¶Êõ≤',
    'Áî≥': 'ÂªâË¥û', 'ÈÖâ': 'ÊñáÊõ≤', 'Êàå': 'Á¶ÑÂ≠ò', '‰∫•': 'Â∑®Èó®',
  };
  return map[lifePalaceBranch];
};

const getShenZhu = (birthYearBranch: EarthlyBranch): StarName => {
  const map: Record<EarthlyBranch, StarName> = {
    'Â≠ê': 'ÁÅ´Êòü', '‰∏ë': 'Â§©Áõ∏', 'ÂØÖ': 'Â§©Ê¢Å', 'ÂçØ': 'Â§©Âêå',
    'Ëæ∞': 'ÊñáÊòå', 'Â∑≥': 'Â§©Êú∫', 'Âçà': 'ÈìÉÊòü', 'Êú™': 'Â§©Áõ∏',
    'Áî≥': 'Â§©Ê¢Å', 'ÈÖâ': 'Â§©Âêå', 'Êàå': 'ÊñáÊòå', '‰∫•': 'Â§©Êú∫',
  };
  return map[birthYearBranch];
};

const getStarsByType = (stars: StarData[]) => {
  const mainStars = stars.filter(s => s.type === '‰∏ªÊòü');
  const auxiliaryStars = stars.filter(s => s.type === 'ËæÖÊòü');
  const maleficStars = stars.filter(s => s.type === 'ÁÖûÊòü' || ['ÊìéÁæä', 'ÈôÄÁΩó', 'ÁÅ´Êòü', 'ÈìÉÊòü', 'Âú∞Á©∫', 'Âú∞Âä´', 'Â§©Âàë'].includes(s.name));
  const peachBlossomStars = stars.filter(s => ['Â§©Âñú', 'Á∫¢È∏æ', 'Â§©Âßö'].includes(s.name));
  
  return { mainStars, auxiliaryStars, maleficStars, peachBlossomStars };
};

const getMainStarInterpretation = (palaces: PalaceData[]) => {
  // È¶ñÂÖàÊü•ÊâæÂëΩÂÆ´‰∏ªÊòü
  const lifePalace = palaces.find(p => p.name === 'ÂëΩÂÆ´');
  const mainStars = lifePalace?.stars?.filter(s => s.type === '‰∏ªÊòü') || [];
  
  if (mainStars.length > 0) {
    // Â¶ÇÊûúÂëΩÂÆ´Êúâ‰∏ªÊòüÔºåÂèñÁ¨¨‰∏Ä‰∏™‰∏ªÊòü
    const mainStar = mainStars[0];
    return MAIN_STARS_INTERPRETATIONS[mainStar.name];
  } else {
    // Â¶ÇÊûúÂëΩÂÆ´Êó†‰∏ªÊòüÔºåÊü•ÊâæËøÅÁßªÂÆ´‰∏ªÊòü
    const migrationPalace = palaces.find(p => p.name === 'ËøÅÁßª');
    const migrationMainStars = migrationPalace?.stars?.filter(s => s.type === '‰∏ªÊòü') || [];
    
    if (migrationMainStars.length > 0) {
      const mainStar = migrationMainStars[0];
      return MAIN_STARS_INTERPRETATIONS[mainStar.name];
    }
  }
  
  return null;
};

const getShenGongAnalysis = (palaceName: string, locale: string = 'zh') => {
  if (locale === 'en') {
    // English version of Body Palace analysis
    const analysisMap: Record<string, { description: string; condition: string; characteristics: string }> = {
      'ÂëΩÂÆ´': {
        description: 'Body Palace in Life Palace',
        condition: 'Born during Zi (11pm-1am) or Wu (11am-1pm) hours - Life and Body Palace merge',
        characteristics: `Life's trajectory becomes exceptionally clear, with a remarkably strong sense of self and independence. These individuals are rarely swayed by external circumstances and tend to take full responsibility for their actions, making transformation more challenging.

When the Body Palace resides in the Life Palace, it creates a "Life-Body Unity" configuration. This manifests as strong subjective consciousness, resilience against external influences, and the courage to be authentically oneself. Such individuals resist change but possess tremendous consistency.

For those with Life-Body Unity, the stars in their Life Palace have amplified effects. If the Life Palace has auspicious stars, both innate nature and acquired development flourish, leading to easier success. However, if the Life Palace has challenging stars, there's no Body Palace to provide balance, creating a pattern of extreme highs and lows.

People with Life-Body Unity pursue "living authentically" as their life's primary goal. They think from a self-centered perspective and can be described as "selectively stubborn." They know precisely what they want to achieve and aren't afraid to spend a lifetime pursuing it.

These individuals prefer doing only what they love. Life is built step by step through personal accumulation. To others, they may seem overly rigid, uninfluenced by external opinions, and unable to compromise or cater to others. This personality trait can create loneliness, but once they understand themselves, they learn to appreciate their uniqueness.

If their innate personality aligns with "social values," their growth path encounters less resistance and internal conflict.

Everything has two sides. While maintaining authenticity, those with Life-Body Unity must also learn to adapt to reality. Absorbing qualities absent from their original chart, while persisting in being true to themselves, they should try to release some stubbornness and embrace learning from others' strengths - this offers another avenue for transforming destiny.`
      },
      'Â§´Â¶ª': {
        description: 'Body Palace in Marriage Palace',
        condition: 'Experienced emotional pain or relationship difficulties',
        characteristics: 'Deeply emotional individuals who prioritize family atmosphere and home life. They have strong family responsibilities and are significantly influenced by marriage and spouse relationships.'
      },
      'Ë¥¢Â∏õ': {
        description: 'Body Palace in Wealth Palace',
        condition: 'Experienced financial setbacks or economic challenges',
        characteristics: 'Money-oriented individuals who pursue financial gain as their primary goal. Their actions and decisions are heavily influenced by economic considerations and financial circumstances.'
      },
      'ËøÅÁßª': {
        description: 'Body Palace in Travel Palace',
        condition: 'Faced difficulties due to relocation or major life changes',
        characteristics: 'Highly susceptible to environmental changes and transitions. They experience frequent career or residential relocations and are often involved in travel or external activities.'
      },
      'ÂÆòÁ¶Ñ': {
        description: 'Body Palace in Career Palace',
        condition: 'Experienced professional setbacks or career challenges',
        characteristics: 'Career-focused individuals who pursue professional achievement as their life\'s primary objective. They are strongly influenced by their work environment and professional circumstances, with a notable attraction to status and recognition.'
      },
      'Á¶èÂæ∑': {
        description: 'Body Palace in Fortune Palace',
        condition: 'Experienced periods of emotional distress or spiritual challenges',
        characteristics: 'Individuals who appreciate comfort and good living, focusing on life quality and personal enjoyment. They may lack aggressive drive and can appear somewhat self-centered, being influenced by ancestral karma, spiritual life, and cause-and-effect relationships, though this doesn\'t necessarily indicate extravagance.'
      }
    };
    
    return analysisMap[palaceName] || {
      description: 'Body Palace influence varies based on specific palace position.',
      condition: 'Body Palace activates after specific life experiences',
      characteristics: 'Significantly impacts personal development after age 28.'
    };
  } else {
    // Chinese version (existing)
  const analysisMap: Record<string, { description: string; condition: string; characteristics: string }> = {
    'ÂëΩÂÆ´': {
      description: '‰∏éÂëΩÂÆ´ÂêåÂÆ´',
      condition: 'Â≠ê„ÄÅÂçàÊó∂ÁîüÁöÑ‰∫∫ÔºåË∫´„ÄÅÂëΩÂêåÂÆ´',
             characteristics: `Ë°åËøêÁöÑË∂ãÂêëÊúÄ‰∏∫ÊòéÊúóÔºå‰∏∫‰∫∫Ëá™Êàë‰∏ªËßÇÂº∫ÁÉàÔºå‰∏çÊòìÂèóÂ§ñÂú®ÁéØÂ¢ÉÂΩ±ÂìçÔºåË°å‰∫ã‰πãÂäüËøáÂ§ßÈÉΩËá™Â∑±‰Ωú‰∏∫ÊâøÊãÖÔºåËæÉ‰∏çÂÆπÊòìÊîπÂëΩ„ÄÇ

„ÄéË∫´ÂÆ´„ÄèÂùêÂëΩÂÆ´Ôºå‰∏∫„ÄéÂëΩË∫´ÂêåÂÆ´„Äè„ÄÇ‰∏ªËßÇÊÑèËØÜÂº∫Ôºå‰∏çÂÆπÊòìÂèóÂ§ñÁïåÂΩ±ÂìçÔºåÂãá‰∫éÂÅöËá™Â∑±Ôºå‰∏çÂÆπÊòìÊîπÂèò„ÄÇË∫´„ÄÅÂëΩÂêåÂÆ´‰πã‰∫∫ÔºåÂØπÂëΩËøêÊúâÂä†Êàê‰ΩúÁî®ÔºåËã•ÂëΩÂÆ´ÊòüÊõúÂêâÔºå‰ª£Ë°®ÂëΩÂ•Ω„ÄÅË∫´Â•ΩÔºåËÉΩÊèêÂçáËá™Â∑±ÔºåÂÆπÊòìÊàêÂäü„ÄÇËã•ÂëΩÂÆ´Â§™Âá∂ÔºåÊ≠§Êó∂Â∑≤Êó†Ë∫´ÂÆ´ÂèØÊâ≠ËΩ¨ÔºåÂëΩËøêÂèØË∞ìÂ§ßÂ•ΩÂ§ßÂùè„ÄÇ

„ÄéÂëΩË∫´ÂêåÂÆ´„ÄèÁöÑ‰∫∫„ÄåÊ¥ªÂá∫Ëá™Â∑±„ÄçÊòØ‰ªñ‰ª¨‰∫∫ÁîüÊâÄËøΩÊ±ÇÁöÑÁõÆÊ†áÔºå‰πüÊòØ‰æùÂæ™ÂèäÊâòÈôÑÁöÑÈáçÁÇπ„ÄÇÂÆπÊòì‰ª•Ëá™Â∑±‰∏∫Âá∫ÂèëÁÇπÊÄùËÄÉÔºåÂèØ‰ª•ËØ¥ÊòØ„ÄåÊã©ÂñÑÂõ∫Êâß„Äç„ÄÇÂæàÊ∏ÖÊ•öËá™Â∑±Ë¶ÅÂÅö‰ªÄ‰πàÁöÑ‰∫∫Ôºå‰πü‰∏çÊÄïÁî®‰∏ÄËæàÂ≠êÁöÑÊó∂Èó¥ÂéªÂÆåÊàê„ÄÇ

Âè™ÂñúÊ¨¢ÂÅöËá™Â∑±ÂñúÊ¨¢ÁöÑ‰∫ã„ÄÇ‰∫∫ÁîüÊòØÈù†ÁùÄ‰∏ÄÊ≠•‰∏ÄËÑöÂç∞Á¥ØÁßØÔºåÂú®Âà´‰∫∫ÁúºÈáåËøôÊ†∑ÁöÑ‰∫∫ÊúâÊó∂Ëøá‰∫éÂõ∫ÊâßÔºå‰∏çÂèóÂà´‰∫∫ÁöÑÂΩ±ÂìçÔºåÊó†Ê≥ïÂãâÂº∫Ëá™Â∑±ÂéªËøéÂêà‰ªñ‰∫∫„ÄÇËøôÊ†∑ÁöÑ‰∏™ÊÄßÈöæÂÖçÊòæÂæóÂ≠§Áã¨ÔºåÂîØÊúâ‰ªñ‰ª¨ÁúãÊáÇËá™Â∑±‰πãÂêéÊâçÊáÇÂæóÊ¨£ËµèËá™Â∑±„ÄÇ

Â¶ÇÊûúÂÖàÂ§©ÁöÑÊÄßÊ†ºÊòØ„ÄåÁ§æ‰ºö‰ª∑ÂÄº„ÄçËÆ§ÂêåÁöÑÔºåÈÇ£‰πàÂú®ÊàêÈïøÁöÑËøáÁ®ã‰∏≠Â∞±‰ºöÂáèÂ∞ëÈòªÂäõÔºå‰∏ç‰ºöÂõ†Ê≠§‰∏éËá™Â∑±ÁöÑÂÜÖÂú®ÊäóË°°„ÄÇ

Âá°‰∫ãÈÉΩÊòØ‰∏Ä‰Ωì‰∏§Èù¢ÁöÑÔºå„ÄéÂëΩË∫´ÂêåÂÆ´„ÄèÁöÑ‰∫∫„ÄÇÂú®ÂÅöËá™Â∑±ÁöÑÂêåÊó∂Ôºå‰πüË¶ÅÂ≠¶‰π†È°∫Â∫îÁé∞ÂÆû„ÄÇÂê∏ÂèñËá™Â∑±ÂéüÂëΩÁõò‰∏≠ÊâÄÊ≤°ÊúâÁöÑÊÄßÊ†ºÔºåÂú®ÂùöÊåÅÂÅöËá™Â∑±ÂèäÊ¥ªÂá∫Ëá™Â∑±ÁöÑÂêåÊó∂ÔºåËØïÁùÄÊîæ‰∏ãËá™Â∑±ÁöÑÂùöÊåÅÔºåÁî®Êõ¥ÂºÄÊîæÁöÑÂøÉÂéªÂ≠¶‰π†Âê∏Êî∂Âà´‰∫∫ÁöÑ‰ºòÂäøÔºå‰πüÊòØÂè¶‰∏ÄÁßçÊâ≠ËΩ¨ÂëΩËøêÁöÑÊú∫‰ºö„ÄÇ`
    },
    'Â§´Â¶ª': {
      description: '‰∏éÂ§´Â¶ªÂÆ´ÂêåÂÆ´',
      condition: 'ÁªèÂéÜËøáÊÑüÊÉÖ‰∏äÁöÑ‰º§ÁóõÊàñÂõ∞Êâ∞',
      characteristics: 'ËæÉÈáçÊÑüÊÉÖ‰πã‰∫∫ÔºåÊ≥®ÈáçÂÆ∂Â∫≠ÁîüÊ¥ªÊ∞îÊ∞õÔºåÂØπÂÆ∂Â∫≠ÊúâË¥£‰ªªÂøÉÔºåÂèóÂ©öÂßªÂèäÈÖçÂÅ∂ÁöÑÂΩ±ÂìçÂæàÂ§ß„ÄÇ'
    },
    'Ë¥¢Â∏õ': {
      description: '‰∏éË¥¢Â∏õÂÆ´ÂêåÂÆ´',
      condition: 'ÁªèÂéÜËøáÁªèÊµé‰∏äÁöÑÊ≥¢ÊäòÊàñÊçüÂ§±',
      characteristics: 'ÂÅèÈáçÈí±Ë¥¢‰ª∑ÂÄºËßÇÔºåË°å‰∫ã‰ª•ËµöÈí±‰∏∫ÁõÆÊ†áÔºåÊòìÂèóÁªèÊµéÂ∑¶Âè≥Ë°å‰∏∫„ÄÇ'
    },
    'ËøÅÁßª': {
      description: '‰∏éËøÅÁßªÂÆ´ÂêåÂÆ´',
      condition: 'ÊõæÂõ†Â§ñÂá∫ÊàñÂèòÂä®ËÄåÈÅáÂà∞Âõ∞Èöæ',
      characteristics: 'ÊòìÂèóÁéØÂ¢ÉÂèòËøÅÁöÑÂΩ±ÂìçÔºåÊØîËæÉÂÆπÊòìÊúâËÅå‰∏öÊàñÂ±Ö‰ΩèÁéØÂ¢ÉÁöÑÂèòËøÅÔºå‰πüÁªèÂ∏∏Â§ñÂá∫„ÄÇ'
    },
    'ÂÆòÁ¶Ñ': {
      description: '‰∏éÂÆòÁ¶ÑÂÆ´ÂêåÂÆ´',
      condition: 'ÁªèÂéÜËøáÂ∑•‰ΩúÊàñ‰∫ã‰∏ö‰∏äÁöÑÊå´Êäò',
      characteristics: 'ÊòØ‰∫ã‰∏öÂøÉËæÉÈáç‰πã‰∫∫Ôºå‰∏ÄÁîüË°å‰∫ã‰ª•ËøΩÊ±Ç‰∫ã‰∏öÊàêÂ∞±‰∏∫ÁõÆÊ†áÔºåÊòìÂèóËÅå‰∏ö‰∏éÂ∑•‰ΩúÁéØÂ¢ÉÂΩ±ÂìçÔºåÊúâÁÉ≠Ë°∑‰∫éÂêç‰ΩçÁöÑÁé∞Ë±°„ÄÇ'
    },
    'Á¶èÂæ∑': {
      description: '‰∏éÁ¶èÂæ∑ÂÆ´ÂêåÂÆ´',
      condition: 'ÊõæÊúâËøáÊÉÖÁª™‰ΩéËêΩÊàñÂøÉÊÉÖ‰∏ç‰Ω≥ÁöÑÊó∂Êúü',
      characteristics: 'ÊØîËæÉÁà±‰∫´ÂèóÔºå‰∫´Á¶è‰πã‰∫∫ÔºåËæÉÊ≥®ÈáçÁîüÊ¥ªË¥®ÈáèÔºå‰ºº‰πéÊúâ‰∫õÁº∫‰πèÁßØÊûÅËøõÂèñÔºåÁ®çÂ´åËá™ÁßÅÔºåÊòìÂèóÁ•ñÂæ∑„ÄÅÂõ†Êûú„ÄÅÁ≤æÁ•ûÁîüÊ¥ªÂΩ±ÂìçÂëΩËøêÔºå‰ΩÜ‰∏ç‰∏ÄÂÆöË°®Á§∫Êå•Èúç„ÄÇ'
    }
  };
  
  return analysisMap[palaceName] || {
    description: 'Ë∫´ÂÆ´‰ΩçÁΩÆÁöÑÂΩ±ÂìçÈúÄË¶ÅÊ†πÊçÆÂÖ∑‰ΩìÂÆ´‰ΩçÊù•ÂàÜÊûê„ÄÇ',
    condition: 'ÁâπÂÆöÁöÑ‰∫∫ÁîüÁªèÂéÜÂêéÂºÄÂêØË∫´ÂÆ´',
    characteristics: '28Â≤ÅÂêé‰ºöÂØπ‰∏™‰∫∫ÂèëÂ±ï‰∫ßÁîüÈáçË¶ÅÂΩ±Âìç„ÄÇ'
  };
  }
};

const getDestinyArrowAnalysis = (palaces: PalaceData[]) => {
  // Ëé∑ÂèñÂëΩËøÅË¥¢ÂÆòÂõõÂÆ´ÁöÑÊï∞ÊçÆÂπ∂Â§ÑÁêÜÂêëÂøÉËá™Âåñ/Á¶ªÂøÉËá™Âåñ
  const processPalaceStars = (palace: PalaceData | undefined) => {
    if (!palace) return palace;
    
    const processedStars = palace.stars?.map(star => {
      // ‰ªépalaceHua‰∏≠ÊèêÂèñÂêëÂøÉËá™ÂåñÂíåÁ¶ªÂøÉËá™Âåñ‰ø°ÊÅØ
      let xiangXinSihua: string | undefined;
      let liXinSihua: string | undefined;
      
      if (star.palaceHua && star.palaceHua.length > 0) {
        star.palaceHua.forEach(hua => {
          // Ëß£ÊûêÂÆ´‰ΩçÂõõÂåñÊ†ºÂºèÔºåÂ¶Ç "iA", "xB", "iC", "xD"
          if (hua.startsWith('i')) {
            xiangXinSihua = hua.substring(1); // ÂèñiÂêéÈù¢ÁöÑÂ≠óÁ¨¶
          } else if (hua.startsWith('x')) {
            liXinSihua = hua.substring(1); // ÂèñxÂêéÈù¢ÁöÑÂ≠óÁ¨¶
          }
        });
      }
      
      return {
        ...star,
        xiangXinSihua,
        liXinSihua
      };
    });
    
    return {
      ...palace,
      stars: processedStars
    };
  };

  const mingGong = processPalaceStars(palaces.find(p => p.name === 'ÂëΩÂÆ´'));
  const qianYi = processPalaceStars(palaces.find(p => p.name === 'ËøÅÁßª'));
  const caiPo = processPalaceStars(palaces.find(p => p.name === 'Ë¥¢Â∏õ'));
  const guanLu = processPalaceStars(palaces.find(p => p.name === 'ÂÆòÁ¶Ñ'));
  
  return {
    mingGong,
    qianYi,
    caiPo,
    guanLu,
    description: `Âú®Á¥´ÂæÆÊñóÊï∞ÁöÑÊòüÁõò‰∏äÔºåÂëΩÂÆ´„ÄÅË¥¢Â∏õÂÆ´„ÄÅÂÆòÁ¶ÑÂÆ´„ÄÅËøÅÁßªÂÆ´ËøôÂõõÂÆ´ÔºåÂ∞±ÂÉè‰∏ÄÊîØËìÑÂäøÂæÖÂèëÁöÑÁÆ≠„ÄÇ

ÂëΩÂÆ´ÊòØÁÆ≠Â§¥ÔºåÂÜ≥ÂÆöÊàë‰ª¨Â§©ÁîüÁöÑÊÄßÊ†ºÂíå‰∫∫ÁîüÊñπÂêëÔºåÂÆÉÂ¶ÇÂêåÁÆ≠Â∞ñÂà∫Á†¥Ëø∑ÈõæÁöÑÂäõÈáèÔºõ
Ë¥¢Â∏õÂÆ´ÊòØÁÆ≠Ë∫´ÔºåÊèê‰æõÂâçËøõÊâÄÈúÄÁöÑÁâ©Ë¥®ÊîØÊíëÔºåÊ≤°ÊúâÂéöÂÆûÁöÑÁÆ≠Ë∫´ÔºåÁÆ≠Â§¥ÂÜçÂà©‰πüÈ£û‰∏çËøúÔºõ
ÂÆòÁ¶ÑÂÆ´ÊòØÁÆ≠ÁæΩÔºåÊéåÊéßÈ£ûË°åÁöÑÁ®≥ÂÆöÊÄßÔºå‰∫ã‰∏öÊàêÂ∞±Â¶ÇÂêåÁæΩÊØõË∞ÉËäÇÁùÄ‰∫∫ÁîüËΩ®ËøπÁöÑÂπ≥Ë°°Ôºõ
ËøÅÁßªÂÆ´ÂàôÊòØÂºìÂº¶ÔºåËµã‰∫àÊàë‰ª¨Á™ÅÁ†¥Áé∞Áä∂ÁöÑÂä®ËÉΩÔºåÊú∫ÈÅáÂíåÈÄÇÂ∫îÂäõÂÜ≥ÂÆö‰∫ÜËøôÊîØÁÆ≠ËÉΩÂ∞ÑÂêëÂ§öËøúÁöÑÂ§©Âú∞„ÄÇ

ÂΩìÂõõÂÆ´ËÉΩÈáèÂíåË∞êÊó∂Ôºå‰∫∫Áîü‰æøÂ¶ÇÁ¶ªÂº¶‰πãÁÆ≠ÔºåÂ∏¶ÁùÄÁ†¥Á©∫‰πãÂäøÂ•îÂêëÁõÆÊ†áÔºõËã•Êüê‰∏ÄÂÆ´‰ΩçËñÑÂº±ÔºåÂ∞±ÂÉèÁÆ≠Ë∫´ÂºØÊõ≤ÊàñÁÆ≠ÁæΩÁº∫ÊçüÔºåÁ∫µÊúâ‰∏áÈíß‰πãÂäõ‰πüÈöæ‰ª•ÂëΩ‰∏≠Èù∂ÂøÉ„ÄÇËøôÁßçÁéØÁéØÁõ∏Êâ£ÁöÑËÅîÂä®ÔºåÊ≠£ÊòØÁ¥´ÂæÆÊñóÊï∞Ê¥ûÂØüÂëΩËøêÁöÑÁ≤æÂ¶ô‰πãÂ§Ñ„ÄÇ`
  };
};



// üî• Êñ∞Â¢ûÔºöÊûÑÂª∫ÂÆåÊï¥ÁöÑÂõõÂåñÂàÜÊûêÊü•ËØ¢
const buildCompleteSihuaQuery = (palaces: PalaceData[], yearGan: HeavenlyStem) => {
  console.log('üöÄ ÂºÄÂßãÊûÑÂª∫ÂõõÂåñÊü•ËØ¢');
  console.log('üîç ‰º†ÂÖ•ÂèÇÊï∞:', { yearGan, palacesCount: palaces.length });
  
  // Ëé∑ÂèñÁîüÂπ¥ÂõõÂåñÊò†Â∞Ñ
  const sihuaMap = SIHUA_MAP[yearGan];
  if (!sihuaMap) {
    console.error('‚ùå Êó†Ê≥ïËé∑ÂèñÁîüÂπ¥ÂõõÂåñÊò†Â∞Ñ:', yearGan, 'SIHUA_MAPÈîÆ:', Object.keys(SIHUA_MAP));
    return `ÁîüÂπ¥ÂõõÂåñÊü•ËØ¢ÊûÑÂª∫Â§±Ë¥•ÔºöÊó†Ê≥ïÊâæÂà∞Âπ¥Âπ≤${yearGan}ÁöÑÂõõÂåñÊò†Â∞Ñ`;
  }

  // Ë∞ÉËØï‰ø°ÊÅØÔºöËæìÂá∫ÂõõÂåñÊò†Â∞Ñ
  console.log('‚úÖ ÁîüÂπ¥ÂõõÂåñÊò†Â∞Ñ:', sihuaMap);
  console.log('üîç ÂÆ´‰ΩçÊï∞ÊçÆ:', palaces.map(p => ({ 
    name: p.name, 
    stars: p.stars?.map(s => s.name) || [] 
  })));

  // Êü•ÊâæÊù•Âõ†ÂÆ´
  const laiYinPalace = palaces.find(p => p.isLaiYinPalace);
  const laiYinGongName = laiYinPalace ? laiYinPalace.name : 'Êú™Áü•';

  // ÊûÑÂª∫Êü•ËØ¢Â≠óÁ¨¶‰∏≤
  let query = `ËØ∑ËøõË°åÁîüÂπ¥ÂõõÂåñ‰∏éÊù•Âõ†ÂÆ´ÂàÜÊûêÔºö

Êï∞ÊçÆÔºö
Êù•Âõ†ÂÆ´Ôºö${laiYinGongName}

ÁîüÂπ¥ÂõõÂåñÊòü‰∏éÂÆ´Ôºö`;

  // ÈÅçÂéÜABCDÂõõÂåñ - ‰øÆÂ§çÈîÆÂêç
  const sihuaTypes = [
    { key: 'Á¶Ñ', letter: 'A', name: 'ÂåñÁ¶Ñ' },
    { key: 'ÊùÉ', letter: 'B', name: 'ÂåñÊùÉ' },
    { key: 'Áßë', letter: 'C', name: 'ÂåñÁßë' },
    { key: 'Âøå', letter: 'D', name: 'ÂåñÂøå' }
  ] as const;

  sihuaTypes.forEach(({ key, letter, name }) => {
    const sihuaStar = sihuaMap[key];
    if (!sihuaStar) {
      console.warn(`üö´ Êú™ÊâæÂà∞${key}Êòü:`, key, sihuaMap);
      return;
    }

    console.log(`üîç Êü•ÊâæÂõõÂåñÊòü: ${sihuaStar} (${letter}${name})`);

    // Êü•ÊâæÂõõÂåñÊòüÊâÄÂú®ÁöÑÂÆ´‰Ωç
    let foundPalace: PalaceData | null = null;
    for (const palace of palaces) {
      const foundStar = palace.stars?.find(star => star.name === sihuaStar);
      if (foundStar) {
        foundPalace = palace;
        console.log(`‚úÖ ÊâæÂà∞${sihuaStar}Âú®${palace.name}`);
        break;
      }
    }

    if (foundPalace) {
      // ÊûÑÂª∫ËØ•ÂÆ´‰ΩçÊâÄÊúâÊòüÊõúÁöÑ‰ø°ÊÅØ
      const allStarsInfo = foundPalace.stars?.map(star => {
        let starInfo = `${star.name}(${star.brightness})`;
        
        // ÂÖàÊî∂ÈõÜÊâÄÊúâÂõõÂåñÊ†áËÆ∞
        const sihuaMarks: string[] = [];
        
        // Ê∑ªÂä†ÁîüÂπ¥ÂõõÂåñÊ†áËÆ∞
        if (star.sihua) {
          sihuaMarks.push(star.sihua);
        }
        
        // Ê∑ªÂä†Ëá™ÂåñÊ†áËÆ∞Ôºà‰ªépalaceHua‰∏≠Ëé∑ÂèñÔºâ
        if (star.palaceHua && star.palaceHua.length > 0) {
          star.palaceHua.forEach(hua => {
            if (hua.startsWith('i')) {
              sihuaMarks.push(`i${hua.substring(1)}`); // ÂêëÂøÉËá™Âåñ
            } else if (hua.startsWith('x')) {
              sihuaMarks.push(`x${hua.substring(1)}`); // Á¶ªÂøÉËá™Âåñ
            }
          });
        }
        
        // Áî®Á©∫Ê†ºËøûÊé•ÊâÄÊúâÂõõÂåñÊ†áËÆ∞ÔºåÂú®ÊòüÊõúÂêçÁß∞ÂêéÂÖàÂä†Á©∫Ê†º
        if (sihuaMarks.length > 0) {
          starInfo += ' ' + sihuaMarks.join(' ');
        }
        
        return starInfo;
      }).join('„ÄÅ') || 'Êó†ÊòüÊõú';

      query += `\n${letter}${name}Ôºö${foundPalace.name} - ${allStarsInfo}`;
    } else {
      console.warn(`‚ùå Êú™ÊâæÂà∞${sihuaStar}Âú®ÊòüÁõò‰∏≠`);
      query += `\n${letter}${name}Ôºö${sihuaStar}(Êú™ÂÖ•Áõò) - Êó†ÊòüÊõú`;
    }
  });

  query += `

Ëß£ÈáäÈáçÁÇπÔºö
1. Âõ†‰∏∫ÁîüÂπ¥ÂõõÂåñÁöÜÁî±Êù•Âõ†ÂÆ´ËÄåÊù•ÔºåÊâÄ‰ª•ÁîüÂπ¥ÂõõÂåñÁöÑËß£ÈáäÂøÖÈ°ªÁªìÂêà‰ª•‰∏ãÁöÑË¶ÅÁ¥†ÔºöÂõõÂåñÁöÑÂÆ´‰Ωç„ÄÅÂõõÂåñ„ÄÅÂõõÂåñÊòüÊõú„ÄÅÊù•Âõ†ÂÆ´‰∏éÂõõÂåñÂÆ´ÁöÑÂÖ≥Á≥ªÔºàÊù•Âõ†ÂÆ´Áªô‰∫ÜÂõõÂåñÂÆ´Êüê‰∏™ÁîüÂπ¥ÂõõÂåñÔºåÁªìÂêàÊòüÊõúÂíåÂÆ´‰ΩçÊé®Êñ≠Ôºâ
2. Â¶ÇÊúâËá™ÂåñÔºåÂøÖÈ°ªÁªìÂêàÂÖ∂ÁîüÂπ¥ÂõõÂåñËß£„ÄÇÂ¶ÇÊüêÂÆ´ÊúâË¥™Áãº xD AÔºåÂàôÂÖàËß£ÈáäAÔºåÂÜçÁªìÂêàDÊâÄÂú®ÁöÑÂÆ´‰ΩçÊù•Ëß£ÈáäxD„ÄÇ
3. ÊØè‰∏Ä‰∏™ÁîüÂπ¥ÂõõÂåñÂøÖÈ°ªÁªìÂêàÊù•Âõ†ÂÆ´ËØ¶ÁªÜËß£Èáä

Ê≥®ÔºöABCDÊòØÁîüÂπ¥Á¶ÑÊùÉÁßëÂøåÔºåxÊòØÁ¶ªÂøÉËá™ÂåñÔºàÊúâÁ†¥ËÄóÁöÑÂê´‰πâÔºâÔºåiÊòØÂêëÂøÉËá™ÂåñÔºàÊúâ‰ªòÂá∫ÁöÑÂê´‰πâÔºâÔºåxAÊòØÁ¶ªÂøÉÁ¶Ñ„ÄÇ`;

  return query;
};

// Ê∑ªÂä†Áº∫Â§±ÁöÑcheckExistingAnalysisÂáΩÊï∞ÂÆö‰πâ

const checkExistingAnalysis = () => {
  return null; // ÊöÇÊó∂Á¶ÅÁî®Êú¨Âú∞AIÂàÜÊûêÁºìÂ≠òÔºåÁî±Êñ∞Êû∂ÊûÑÁöÑAPIÁ≥ªÁªüÂ§ÑÁêÜ
};

// ËÆ°ÁÆóÊµÅÊúàÊéíÂ∏É
const calculateLunarMonth = (palaces: PalaceData[], currentMonth: number = new Date().getMonth() + 1) => {
  console.log('üåô ÂºÄÂßãËÆ°ÁÆóÊµÅÊúàÊéíÂ∏É');
  
  // Ë∞ÉËØïÔºöÊü•ÁúãpalacesÊï∞ÁªÑÁöÑÊéíÂ∫è
  console.log('üîç palacesÊï∞ÁªÑÊéíÂ∫è:');
  palaces.forEach((palace, index) => {
    console.log(`Á¥¢Âºï${index}: ${palace.branch}ÂÆ´ -> ${palace.name}`);
  });
  
  // 1. ÊâæÂà∞ÂØÖÂÆ´ÔºàÈÄöËøáÂú∞ÊîØÊü•ÊâæÔºâ
  const yinPalace = palaces.find(palace => palace.branch === 'ÂØÖ');
  if (!yinPalace) {
    console.log('‚ùå Êú™ÊâæÂà∞ÂØÖÂÆ´');
    return palaces;
  }
  console.log('üîç Ê≠•È™§1 - ÊâæÂà∞ÂØÖÂÆ´:', yinPalace.branch, 'ÂØπÂ∫îÂÆ´‰Ωç:', yinPalace.name);
  
  // 2. ÊâæÂà∞ÂØÖÂÆ´ÁöÑÊú¨ÂëΩÂÆ´‰ΩçÂêçÁß∞
  const yinBasePalaceName = yinPalace.name; // Â¶Ç"Ë¥¢Â∏õ"
  console.log('üîç Ê≠•È™§2 - ÂØÖÂÆ´ÁöÑÊú¨ÂëΩÂÆ´‰Ωç:', yinBasePalaceName);
  
  // 3. Â∞ÜÊú¨ÂëΩÂÆ´‰ΩçÂêçÁß∞Êò†Â∞ÑÂà∞ÊµÅÂπ¥ÂÆ´‰ΩçÂêçÁß∞
  const palaceNameMap: { [key: string]: string } = {
    'ÂëΩÂÆ´': 'ÊµÅÂëΩ',
    'ÂÖÑÂºü': 'ÊµÅÂÖÑ', 
    'Â§´Â¶ª': 'ÊµÅÂ§´',
    'Â≠êÂ•≥': 'ÊµÅÂ≠ê',
    'Ë¥¢Â∏õ': 'ÊµÅË¥¢',
    'ÁñæÂéÑ': 'ÊµÅÁñæ',
    'ËøÅÁßª': 'ÊµÅËøÅ',
    '‰∫§Âèã': 'ÊµÅÂèã',
    'ÂÆòÁ¶Ñ': 'ÊµÅÂÆò',
    'Áî∞ÂÆÖ': 'ÊµÅÁî∞',
    'Á¶èÂæ∑': 'ÊµÅÁ¶è',
    'Áà∂ÊØç': 'ÊµÅÁà∂'
  };
  
  const targetFlowName = palaceNameMap[yinBasePalaceName];
  if (!targetFlowName) {
    console.log('‚ùå Êú™ÊâæÂà∞ÂÆ´‰ΩçÊò†Â∞Ñ:', yinBasePalaceName);
    return palaces;
  }
  
  console.log('üîç Ê≠•È™§3 - ÂØªÊâæÊµÅÂπ¥ÂÆ´‰Ωç:', targetFlowName);
  
  // 4. ÊâæÂà∞ÊµÅÂπ¥ÂÆ´‰ΩçÂú®Âì™‰∏™‰ΩçÁΩÆ
  let yearlyPalaceIndex = -1;
  palaces.forEach((palace, index) => {
    if (palace.yearlyLuck && palace.yearlyLuck.flowName === targetFlowName) {
      yearlyPalaceIndex = index;
      console.log('‚úÖ Ê≠•È™§4 - ÊâæÂà∞ÊµÅÂπ¥ÂÆ´‰Ωç:', targetFlowName, '‰ΩçÁΩÆ:', index, 'ÂØπÂ∫îÂÆ´‰Ωç:', palace.name);
    }
  });
  
  if (yearlyPalaceIndex === -1) {
    console.log('‚ùå Êú™ÊâæÂà∞ÊµÅÂπ¥ÂÆ´‰Ωç:', targetFlowName);
    return palaces;
  }
  
  // 5. ‰ªéÊµÅÂπ¥ÂÆ´‰ΩçËµ∑Ê≠£ÊúàÔºåÈ°∫Êó∂ÈíàÊéíÂ∏É12‰∏™Êúà
  const updatedPalaces = palaces.map((palace, index) => {
    // ‰ªéÊâæÂà∞ÁöÑÊµÅÂπ¥ÂÆ´‰Ωç(Â¶Ç"ÊµÅË¥¢")Ëµ∑Ê≠£ÊúàÔºåÁõ¥Êé•ËÆ°ÁÆóÊúà‰ªΩ
    const monthOffset = (index - yearlyPalaceIndex + 12) % 12;
    const lunarMonthName = LUNAR_MONTH_NAMES[monthOffset];
    console.log(`üîç Ê≠•È™§5 - ÂÆ´‰Ωç${index}: ${palace.name} -> ‰ªé${targetFlowName}ÂºÄÂßãÁ¨¨${monthOffset}‰∏™Êúà -> ${lunarMonthName}`);
    
    return {
      ...palace,
      lunarMonth: lunarMonthName,
      isCurrentMonth: monthOffset === (currentMonth - 1)
    };
  });
  
  console.log('‚úÖ ÊµÅÊúàÊéíÂ∏ÉÂÆåÊàê');
  return updatedPalaces;
};

function ZiweiPage() {
  const router = useRouter();
  const { canCheckinToday, performCheckin } = useDailyCheckin();
  const searchParams = useSearchParams();
  const chartId = searchParams.get('chartId');
  const lang = searchParams.get('lang');
  const isEnglish = lang === 'en';
  
  const store = useZiweiStore();
  const actions = useZiweiActions();
  
  const birthData = store.birthData;
  const ziweiResult = store.ziweiResult;
  const isCalculating = useZiweiStore(selectIsCalculating);
  const selectedDecadeIndex = store.selectedDecadeIndex;
  const selectedYearlyIndex = store.selectedYearlyIndex;
  const selectedPalaceForSihua = store.selectedPalaceForSihua;
  const showMenu = useZiweiStore(selectShowMenu);
  // Ê∑ªÂä†ÂÖ∂‰ªñÊâÄÈúÄÁä∂ÊÄÅ
  
  const isFormValid = useZiweiStore(selectIsFormValid);
  const hasResult = useZiweiStore(selectHasResult);
  
  // ‰ΩøÁî®actionsÊõøÊç¢setters
  const setBirthData = actions.setBirthData;
  const { setShowMenu, calculateZiwei, setSelectedDecadeIndex, setSelectedYearlyIndex, setSelectedPalaceForSihua, setZiweiResult } = useZiweiActions();
  
  const DRAFT_KEY = 'ziweiFormDraft';

  // ÁßëÂ≠¶ÂºπÁ™óÁä∂ÊÄÅ - ‰ΩøÁî®Êú¨Âú∞Áä∂ÊÄÅÁÆ°ÁêÜ
  const [showLaiYinScience, setShowLaiYinScience] = useState(false);
  const [showMingGongScience, setShowMingGongScience] = useState(false);
  const [showSihuaScience, setShowSihuaScience] = useState(false);
  const [showShenGongScience, setShowShenGongScience] = useState(false);
  const [showZiweiVsBaziModal, setShowZiweiVsBaziModal] = useState(false);
  
  // Ëé∑ÂèñURLÂèÇÊï∞ (‰ΩøÁî®‰∏äÈù¢Â∑≤Â£∞ÊòéÁöÑsearchParams)
  const autoLoad = searchParams.get('autoLoad');
  const urlName = searchParams.get('name');
  const urlYear = searchParams.get('year');
  const urlMonth = searchParams.get('month');
  const urlDay = searchParams.get('day');
  const urlHour = searchParams.get('hour');
  const urlGender = searchParams.get('gender');
  const urlSource = searchParams.get('source');
  const menuRef = useRef<HTMLDivElement>(null);

  // Â§ÑÁêÜÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠ËèúÂçï
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setShowMenu(false);
      }
    }
    
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [menuRef]);

  // Â§ÑÁêÜURLÂèÇÊï∞Ëá™Âä®Âä†ËΩΩ
  useEffect(() => {
    if (autoLoad === 'true' && urlName && urlYear && urlMonth && urlDay && urlHour && urlGender) {
      console.log('üîÑ Ëá™Âä®Âä†ËΩΩÁî®Êà∑ÁªëÂÆöÁöÑÂá∫Áîü‰ø°ÊÅØ:', {
        name: urlName,
        year: urlYear,
        month: urlMonth,
        day: urlDay,
        hour: urlHour,
        gender: urlGender,
        source: urlSource
      });

      // Â°´ÂÖ•Áî®Êà∑ÁöÑÂá∫Áîü‰ø°ÊÅØ
      const birthDataForCalculation = {
        username: urlName,
        year: urlYear,
        month: urlMonth,
        day: urlDay,
        hour: urlHour,
        gender: urlGender as 'male' | 'female',
        category: 'personal' // Êù•Ëá™‰∏™‰∫∫Ê°£Ê°àÁöÑÂëΩÁõò
      };

      setBirthData(birthDataForCalculation);

      // Âª∂ËøüËá™Âä®ËÆ°ÁÆóÔºåÁ°Æ‰øùÊï∞ÊçÆÂ∑≤Êõ¥Êñ∞
      setTimeout(() => {
        calculateZiwei();
      }, 100);
    }
  }, [autoLoad, urlName, urlYear, urlMonth, urlDay, urlHour, urlGender, urlSource]);

  // AIÂàÜÊûêÁõ∏ÂÖ≥Áä∂ÊÄÅ
  const [aiDialogOpen, setAiDialogOpen] = useState(false);
  const [ziweiAnalysisStatus, setZiweiAnalysisStatus] = useState<{
    isLoading: boolean;
    isCompleted: boolean;
    isFailed: boolean;
    elapsedTime: number;
    formattedElapsedTime: string;
    error: string | null;
  } | null>(null);
  

  
  // Ë¥≠‰π∞ÂØπËØùÊ°ÜÁä∂ÊÄÅ
  const [showPurchaseDialog, setShowPurchaseDialog] = useState(false);

  const handleDecadeSelect = (index: number | null) => {
    setSelectedDecadeIndex(index);
    setSelectedYearlyIndex(null);
    setSelectedPalaceForSihua(null);
    if (ziweiResult && ziweiResult.basePalaces && ziweiResult.decadePalaces) {
      const { basePalaces, decadePalaces } = ziweiResult;
      let updatedPalaces = [...basePalaces];
      if (index !== null) {
        const selectedDecadePalace = decadePalaces[index];
        const yearGan = ziweiResult.yearGan;
        const yearStemYinYang = STEM_YIN_YANG[yearGan];
        const isYangManOrYinWoman = (yearStemYinYang === 'Èò≥' && birthData.gender === 'male') || (yearStemYinYang === 'Èò¥' && birthData.gender === 'female');
        const clickedPalaceBranch = selectedDecadePalace.branch;
        const clickedPalaceIndex = EARTHLY_BRANCHES.indexOf(clickedPalaceBranch);
        updatedPalaces = updatedPalaces.map(palace => {
          const branchIndex = EARTHLY_BRANCHES.indexOf(palace.branch);
          let stepsFromClicked;
          if (isYangManOrYinWoman) {
            stepsFromClicked = (branchIndex - clickedPalaceIndex + 12) % 12;
          } else {
            stepsFromClicked = (clickedPalaceIndex - branchIndex + 12) % 12;
          }
          const decadeNameIndex = stepsFromClicked;
          const decadeName = ENGLISH_DECADE_PALACE_NAMES[decadeNameIndex];
          return { ...palace, yearlyName: decadeName, yearlyLuck: undefined };
        });
        if (selectedDecadePalace.decade) {
          const startAge = parseInt(selectedDecadePalace.decade.split('-')[0], 10);
          const startYear = parseInt(birthData.year, 10) + startAge - 1;
          const yearlyLuckMap = new Map<EarthlyBranch, { year: number, age: number }>();
          for (let i = 0; i < 10; i++) {
            const currentYear = startYear + i;
            const currentAge = startAge + i;
            const yearBranch = Solar.fromYmd(currentYear, 6, 30).getLunar().getYearZhi() as EarthlyBranch;
            yearlyLuckMap.set(yearBranch, { year: currentYear, age: currentAge });
          }
          updatedPalaces = updatedPalaces.map(palace => ({
            ...palace,
            yearlyLuck: yearlyLuckMap.get(palace.branch)
          }));
        }
      } else {
        updatedPalaces = updatedPalaces.map(palace => ({
          ...palace,
          yearlyName: undefined,
          yearlyLuck: undefined
        }));
      }
      setZiweiResult({
        ...ziweiResult,
        palaces: updatedPalaces,
        basePalaces: updatedPalaces,
        selectedIndex: index
      });
    }
  };

  const handleYearlySelect = (index: number | null) => {
    setSelectedYearlyIndex(index);
    setSelectedPalaceForSihua(null);
    if (ziweiResult && selectedDecadeIndex !== null && ziweiResult.decadePalaces[selectedDecadeIndex] && index !== null) {
      const selectedDecadePalace = ziweiResult.decadePalaces[selectedDecadeIndex];
      const startAge = parseInt(selectedDecadePalace.decade.split('-')[0], 10);
      const startYear = parseInt(birthData.year, 10) + startAge - 1;
      const yearlyDataForSelector: { year: number; branch: EarthlyBranch }[] = [];
      for (let i = 0; i < 10; i++) {
        const currentYear = startYear + i;
        const yearBranch = Solar.fromYmd(currentYear, 6, 30).getLunar().getYearZhi() as EarthlyBranch;
        yearlyDataForSelector.push({ year: currentYear, branch: yearBranch });
      }
      const selectedYearBranch = yearlyDataForSelector[index].branch;
      const yearlyLifePalaceBranchIndex = EARTHLY_BRANCHES.indexOf(selectedYearBranch);
      
      console.log('üîç ÊµÅÂπ¥ËÆ°ÁÆóË∞ÉËØï:');
      console.log('ÈÄâ‰∏≠ÊµÅÂπ¥Âú∞ÊîØ:', selectedYearBranch);
      console.log('ÊµÅÂπ¥ÂëΩÂÆ´Âú∞ÊîØÁ¥¢Âºï:', yearlyLifePalaceBranchIndex);
      console.log('EARTHLY_BRANCHES:', EARTHLY_BRANCHES);
      console.log('ENGLISH_YEARLY_PALACE_NAMES:', ENGLISH_YEARLY_PALACE_NAMES);
      
      // Ê∑ªÂä†Êú¨ÂëΩÁõòÂÆ´‰ΩçÂàÜÈÖçË∞ÉËØï
      console.log('üîç Êú¨ÂëΩÁõòÂÆ´‰ΩçÂàÜÈÖçË∞ÉËØï:');
      ziweiResult.palaces.forEach((palace, index) => {
        console.log(`Á¥¢Âºï${index}: ${palace.branch}ÂÆ´ -> ${palace.name}`);
      });
      
      let updatedPalaces = [...ziweiResult.palaces];
      
      updatedPalaces = updatedPalaces.map(palace => {
        const selectedYear = yearlyDataForSelector[index].year;
        const age = selectedYear - parseInt(birthData.year, 10) + 1;
        
        // Ê≠£Á°ÆÁöÑÊµÅÂπ¥ÂçÅ‰∫åÂÆ´ÊéíÂ∏ÉÔºöÊ†πÊçÆÊµÅÂπ¥Âú∞ÊîØÂÆö‰Ωç
        // ÊµÅÂπ¥Âú∞ÊîØÊâÄÂú®ÁöÑÂÆ´‰ΩçËµ∑ÊµÅÂëΩÔºåÈÄÜÊó∂ÈíàÊéíÂ∏É
        const palaceBranchIndex = EARTHLY_BRANCHES.indexOf(palace.branch);
        const yearlyFlowNameIndex = (palaceBranchIndex - yearlyLifePalaceBranchIndex + 12) % 12;
        const yearlyFlowName = ENGLISH_YEARLY_PALACE_NAMES[yearlyFlowNameIndex];
        
        console.log(`üîç ÊµÅÂπ¥ÂÆ´‰ΩçËÆ°ÁÆó: ${palace.name}(${palace.branch}) Á¥¢Âºï${palaceBranchIndex}, ÊµÅÂπ¥ÂëΩÂÆ´Á¥¢Âºï${yearlyLifePalaceBranchIndex}, Â∑ÆÂÄº${yearlyFlowNameIndex} -> ${yearlyFlowName}`);
        
        return {
          ...palace,
          // ‰øùÁïôÂéüÊúâÁöÑyearlyNameÔºàÂ§ßËøêÂÆ´‰ΩçÂêçÁß∞Ôºâ
          // Âú®yearlyLuck‰∏≠ÊòæÁ§∫ÊµÅÂπ¥‰ø°ÊÅØ
          yearlyLuck: {
            year: selectedYear,
            age: age,
            flowName: yearlyFlowName // Â∞ÜÊµÅÂπ¥ÂÆ´‰ΩçÂêçÁß∞Â≠òÂÇ®Âú®ËøôÈáå
          }
        };
      });
      
      // ËÆ°ÁÆóÊµÅÊúàÊéíÂ∏É
      updatedPalaces = calculateLunarMonth(updatedPalaces);
      
      setZiweiResult({ ...ziweiResult, palaces: updatedPalaces });
    }
  };

  const handleCalculate = () => {
    setSelectedDecadeIndex(null);
    setSelectedYearlyIndex(null);
    setSelectedPalaceForSihua(null);
    calculateZiwei();  // Ë∞ÉÊï¥‰∏∫Êó†ÂèÇÊï∞Ë∞ÉÁî®

    if (birthData.username && birthData.gender) {
      const birthday = `${birthData.year}-${birthData.month.padStart(2, '0')}-${birthData.day.padStart(2, '0')}`;
      
      // ‰ΩøÁî®Áªü‰∏ÄÁöÑcharts APIÂíåBearer tokenËÆ§ËØÅ
      (async () => {
        try {
          // WalletConnectËÆ§ËØÅÁî±apiClientËá™Âä®Â§ÑÁêÜÔºåÊó†ÈúÄÊâãÂä®Ê£ÄÊü•
          console.log('üîÑ ÂºÄÂßã‰øùÂ≠òÁ¥´ÂæÆÂëΩÁõò:', birthData.username);

          const response = await apiClient.post('/api/charts', {
              name: birthData.username,
              birth_year: parseInt(birthData.year),
              birth_month: parseInt(birthData.month),
              birth_day: parseInt(birthData.day),
              birth_hour: parseInt(birthData.hour),
              gender: birthData.gender as 'male' | 'female',
              chart_type: 'ziwei',
              category: birthData.category
            });

          if (response.success) {
            const result = response.data;
            if (result.success) {
              console.log('‚úÖ Á¥´ÂæÆÂëΩÁõòÂ∑≤‰øùÂ≠ò/Êõ¥Êñ∞:', result.record.id);
            } else {
              throw new Error(result.error || '‰øùÂ≠òÂ§±Ë¥•');
            }
          } else {
            throw new Error(`HTTP ${response.status}`);
          }
        } catch (error) {
          console.error('‚ùå ‰øùÂ≠òÁ¥´ÂæÆÂëΩÁõòÂ§±Ë¥•:', error);
        }
      })();
    }
  }

  // Effect for auto-saving form progress
  useEffect(() => {
    // Only save a draft if we are creating a new chart
    if (typeof window !== 'undefined' && !chartId) {
      localStorage.setItem(DRAFT_KEY, JSON.stringify(birthData));
    }
  }, [birthData, chartId]);

  // Effect for initializing the page from saved draft (only when creating new chart)
  useEffect(() => {
    if (!chartId && typeof window !== 'undefined') {
      // Try to load saved draft when creating new chart
      const savedDraft = localStorage.getItem(DRAFT_KEY);
      if (savedDraft) {
        try {
          const parsedDraft = JSON.parse(savedDraft);
          if (parsedDraft && typeof parsedDraft === 'object') {
            setBirthData(parsedDraft);
            if (parsedDraft.year && parsedDraft.month && parsedDraft.day && parsedDraft.hour && parsedDraft.gender) {
              setBirthData(parsedDraft);
              calculateZiwei();
            }
          }
        } catch (error) {
          console.error("Failed to load draft from localStorage", error);
          localStorage.removeItem(DRAFT_KEY);
        }
      }
    }
  }, [chartId, calculateZiwei]);

  const handlePalaceClick = (palace: PalaceData) => {
    setSelectedPalaceForSihua(palace);
  };

  let sihuaDisplay: string[] | undefined;
  if (selectedPalaceForSihua && ziweiResult) {
      const sourcePalace = selectedPalaceForSihua;
      const gongGan = sourcePalace.heavenlyStem;
      const sihuaByGan = SIHUA_MAP[gongGan];
      const allPalaces = ziweiResult.palaces;
      const basePalaces = ziweiResult.basePalaces;

      if (sihuaByGan) {
          sihuaDisplay = Object.entries(sihuaByGan).map(([hua, starName]) => {
              const isYearlyActive = selectedYearlyIndex !== null;
              const sourcePalaceName = (isYearlyActive && sourcePalace.yearlyName) ? sourcePalace.yearlyName : sourcePalace.name;

              const targetPalace = allPalaces.find(p => p.stars?.some(s => s.name === starName));
              if (!targetPalace) {
                  return `[${sourcePalaceName}] Âåñ[${starName}][${hua}] Êú™ÂÖ•Áõò`;
              }

              let targetPalaceDisplayName: string | undefined;
              let oppositePalaceDisplayName: string | undefined;

              if (isYearlyActive) {
                  // Yearly active: target/clash are Decade palaces
                  targetPalaceDisplayName = targetPalace.name; // This is the Decade name, e.g., "Â§ßÂÆò"
                  if (hua === 'Âøå') {
                      const oppositeBranch = EARTHLY_BRANCHES[(EARTHLY_BRANCHES.indexOf(targetPalace.branch) + 6) % 12];
                      const oppositePalace = allPalaces.find(p => p.branch === oppositeBranch);
                      oppositePalaceDisplayName = oppositePalace?.name;
                  }
              } else {
                  // Decade or Base active: target/clash are Base palaces
                  const baseTargetPalace = basePalaces.find(p => p.branch === targetPalace.branch);
                  targetPalaceDisplayName = baseTargetPalace?.name; // e.g., "ÂÆòÁ¶Ñ"
                  if (hua === 'Âøå') {
                      const oppositeBranch = EARTHLY_BRANCHES[(EARTHLY_BRANCHES.indexOf(targetPalace.branch) + 6) % 12];
                      const oppositePalace = basePalaces.find(p => p.branch === oppositeBranch);
                      oppositePalaceDisplayName = oppositePalace?.name;
                  }
              }

              if (!targetPalaceDisplayName) {
                  return `[${sourcePalaceName}] Âåñ[${starName}][${hua}] ÂÖ•Êú™Áü•ÂÆ´‰Ωç`;
              }

              let output = `[${sourcePalaceName}] Âåñ[${starName}][${hua}] ÂÖ•[${targetPalaceDisplayName}]`;
              
              if (hua === 'Âøå' && oppositePalaceDisplayName) {
                  output += ` ÂÜ≤[${oppositePalaceDisplayName}]`;
              }
              return output;
          }).filter(Boolean) as string[];
      }
  }

  const handleSave = () => {
    if (birthData.username && birthData.year) {
      // ‰ΩøÁî®Áªü‰∏ÄÁöÑcharts APIÂíåBearer tokenËÆ§ËØÅ
      (async () => {
        try {
          // WalletConnectËÆ§ËØÅÁî±apiClientËá™Âä®Â§ÑÁêÜÔºåÊó†ÈúÄÊâãÂä®Ê£ÄÊü•
          console.log('üîÑ ÂºÄÂßã‰øùÂ≠òÁ¥´ÂæÆÂëΩÁõò:', birthData.username);

          const response = await apiClient.post('/api/charts', {
              name: birthData.username,
              birth_year: parseInt(birthData.year),
              birth_month: parseInt(birthData.month),
              birth_day: parseInt(birthData.day),
              birth_hour: parseInt(birthData.hour),
              gender: birthData.gender as 'male' | 'female',
              chart_type: 'ziwei',
              category: birthData.category
            });

          if (response.success) {
            const result = response.data;
            console.log('üîç APIËøîÂõûÁªìÊûú:', result);
            
            if (result.success) {
              console.log('‚úÖ Á¥´ÂæÆÂëΩÁõòÂ∑≤‰øùÂ≠ò/Êõ¥Êñ∞:', result.record?.id || result.id || 'Êú™Áü•ID');
            } else {
              throw new Error(result.error || '‰øùÂ≠òÂ§±Ë¥•');
            }
          } else {
            const errorText = await response.text();
            console.error('‚ùå HTTPÈîôËØØÂìçÂ∫î:', response.status, errorText);
            throw new Error(`HTTP ${response.status}: ${errorText}`);
          }
        } catch (error) {
          console.error('‚ùå ‰øùÂ≠òÁ¥´ÂæÆÂëΩÁõòÂ§±Ë¥•:', error);
        }
      })();
    }
  };

  // ÂΩìÊúâchartIdÊó∂ÔºåËá™Âä®Âä†ËΩΩÂØπÂ∫îÁöÑÂëΩÁõòÊï∞ÊçÆ
  useEffect(() => {
    if (chartId) {
      const loadChartData = async () => {
        try {
          // WalletConnectËÆ§ËØÅÁî±apiClientËá™Âä®Â§ÑÁêÜ
          console.log('üîÑ Âä†ËΩΩÂëΩÁõòÊï∞ÊçÆ');

          const response = await apiClient.get(`/api/charts/${chartId}`);

          if (response.success) {
            const result = response.data;
            console.log('üîç APIÂìçÂ∫îÊï∞ÊçÆÁªìÊûÑ:', result);
            // APIÁõ¥Êé•ËøîÂõûÂõæË°®Êï∞ÊçÆÔºå‰∏çÈúÄË¶ÅÊ£ÄÊü•ÂµåÂ•óÁöÑsuccessÂíådataÂ≠óÊÆµ
            if (result && result.id) {
              const chartData = result;
              console.log('‚úÖ Âä†ËΩΩÂëΩÁõòÊï∞ÊçÆÊàêÂäü:', chartData);
              
              // ËÆæÁΩÆbirthDataÁä∂ÊÄÅ
              const birthDataForCalculation = {
                username: chartData.name,
                year: chartData.birth_year.toString(),
                month: chartData.birth_month.toString(),
                day: chartData.birth_day.toString(),
                hour: chartData.birth_hour.toString(),
                gender: chartData.gender,
                category: chartData.category || 'others'
              };
              
              setBirthData(birthDataForCalculation);
              
              // Ëá™Âä®ËÆ°ÁÆóÁ¥´ÂæÆÁªìÊûú
              setBirthData(birthDataForCalculation);
              calculateZiwei();
              

            } else {
              console.log('‚ùå Êï∞ÊçÆÊ†ºÂºè‰∏çÊ≠£Á°ÆÔºåÁº∫Â∞ëÂøÖË¶ÅÂ≠óÊÆµ:', result);
              throw new Error('Ëé∑ÂèñÁöÑÂëΩÁõòÊï∞ÊçÆÊ†ºÂºè‰∏çÊ≠£Á°Æ');
            }
          } else if (response.status === 404) {
            // ÂëΩÁõò‰∏çÂ≠òÂú®ÔºåÊ∏ÖÁêÜURLÂπ∂ÈáçÂÆöÂêë
            console.log('ÂëΩÁõò‰∏çÂ≠òÂú®ÔºåÈáçÂÆöÂêëÂà∞ÂëΩ‰π¶È°µÈù¢');
            router.replace('/charts');
            return;
          } else {
            throw new Error(`HTTP ${response.status}`);
          }
        } catch (error) {
          console.error('‚ùå Âä†ËΩΩÂëΩÁõòÊï∞ÊçÆÂ§±Ë¥•:', error);
          
          // Â¶ÇÊûúÊòØÂëΩÁõò‰∏çÂ≠òÂú®Áõ∏ÂÖ≥ÈîôËØØÔºåÈáçÂÆöÂêëÂà∞ÂëΩ‰π¶È°µÈù¢
          if (error instanceof Error && 
              (error.message.includes('ÂëΩÁõò‰∏çÂ≠òÂú®') || 
               error.message.includes('Êó†ÊùÉÈôêËÆøÈóÆ') || 
               error.message.includes('HTTP 404'))) {
            console.log('ÂëΩÁõòÂ∑≤Ë¢´Âà†Èô§ÊàñÊó†ÊùÉÈôêËÆøÈóÆÔºåÈáçÂÆöÂêëÂà∞ÂëΩ‰π¶È°µÈù¢');
            router.replace('/charts');
            return;
          }
          
          // ÂÖ∂‰ªñÈîôËØØÊòæÁ§∫ÊèêÁ§∫
          alert('Âä†ËΩΩÂëΩÁõòÂ§±Ë¥•Ôºö' + error.message);
        }
      };

      loadChartData();
    }
  }, [chartId, calculateZiwei, router]);

  // ‰ΩøÁî®useCallbackÈÅøÂÖçÊó†ÈôêÂæ™ÁéØ
  const handleZiweiStatusChange = useCallback((status: {
    isLoading: boolean;
    isCompleted: boolean;
    isFailed: boolean;
    elapsedTime: number;
    formattedElapsedTime: string;
    error: string | null;
  }) => {
    setZiweiAnalysisStatus(status);
  }, []);

  // ÂÆö‰πâloadChartDataÂáΩÊï∞
  const loadChartData = async (chartId: string) => {
    try {
      // WalletConnectËÆ§ËØÅÁî±apiClientËá™Âä®Â§ÑÁêÜ
      console.log('üîÑ Âä†ËΩΩÂëΩÁõòÊï∞ÊçÆ ID:', chartId);

      const response = await apiClient.get(`/api/charts/${chartId}`);

      if (response.success) {
        const result = response.data;
        console.log('üîç APIÂìçÂ∫îÊï∞ÊçÆÁªìÊûÑ (Á¨¨‰∫å‰∏™ÂáΩÊï∞):', result);
        // APIÁõ¥Êé•ËøîÂõûÂõæË°®Êï∞ÊçÆÔºå‰∏çÈúÄË¶ÅÊ£ÄÊü•ÂµåÂ•óÁöÑsuccessÂíådataÂ≠óÊÆµ
        if (result && result.id) {
          const chartData = result;
          console.log('‚úÖ Âä†ËΩΩÂëΩÁõòÊï∞ÊçÆÊàêÂäü:', chartData);
          
          // ËÆæÁΩÆbirthDataÁä∂ÊÄÅ
          const birthDataForCalculation = {
            username: chartData.name,
            year: chartData.birth_year.toString(),
            month: chartData.birth_month.toString(),
            day: chartData.birth_day.toString(),
            hour: chartData.birth_hour.toString(),
            gender: chartData.gender,
            category: chartData.category || 'others'
          };
          
          setBirthData(birthDataForCalculation);
          calculateZiwei();
    } else {
          console.log('‚ùå Êï∞ÊçÆÊ†ºÂºè‰∏çÊ≠£Á°ÆÔºåÁº∫Â∞ëÂøÖË¶ÅÂ≠óÊÆµ (Á¨¨‰∫å‰∏™ÂáΩÊï∞):', result);
          throw new Error('Ëé∑ÂèñÁöÑÂëΩÁõòÊï∞ÊçÆÊ†ºÂºè‰∏çÊ≠£Á°Æ');
        }
      } else if (response.status === 404) {
        console.log('ÂëΩÁõò‰∏çÂ≠òÂú®ÔºåÈáçÂÆöÂêëÂà∞ÂëΩ‰π¶È°µÈù¢');
        router.replace('/en/charts');
        return;
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå Âä†ËΩΩÂëΩÁõòÊï∞ÊçÆÂ§±Ë¥•:', error);
      if (error instanceof Error && 
          (error.message.includes('ÂëΩÁõò‰∏çÂ≠òÂú®') || 
           error.message.includes('Êó†ÊùÉÈôêËÆøÈóÆ') || 
           error.message.includes('HTTP 404'))) {
        console.log('ÂëΩÁõòÂ∑≤Ë¢´Âà†Èô§ÊàñÊó†ÊùÉÈôêËÆøÈóÆÔºåÈáçÂÆöÂêëÂà∞ÂëΩ‰π¶È°µÈù¢');
        router.replace('/en/charts');
        return;
      }
      alert('Âä†ËΩΩÂëΩÁõòÂ§±Ë¥•Ôºö' + error.message);
    }
  };

  useEffect(() => {
    const chartId = searchParams.get('chartId');
    if (chartId) {
      loadChartData(chartId);
    }
  }, [searchParams]);

  return (
    <SmartLayout>
      <div className="min-h-screen bg-gradient-to-b from-[#FFFFFF] to-[#F8F9FA] dark:from-[#1A2242] dark:via-[#252D47] dark:to-[#1A2242] text-[#333333] dark:text-[#E0E0E0]">
        
        {/* ‰∏ªË¶ÅÂÜÖÂÆπ */}
        <div className="pt-4 pb-0 md:pb-4 px-1 md:px-4 w-full">
        {ziweiResult ? (
          <div>
            <div className="flex justify-between items-start mb-6 gap-4">
              <div className="flex-1">
                <h2 className="text-3xl font-bold text-purple-600 dark:text-amber-400 font-noto">{birthData.username} ÁöÑÊòüÁõò</h2>
                <div className="text-sm text-gray-300 mt-2 space-y-1">
                  <p>ÂÖ¨ÂéÜ: {birthData.year}-{birthData.month}-{birthData.day} {birthData.hour}:00</p>
                  <p>Èò¥ÂéÜ: {ziweiResult.lunarDate}</p>
                </div>
              </div>
              

              
              <div className="flex flex-col gap-2">

                <Button
                  variant="outline"
                  size="sm"
                  className="flex items-center space-x-2 hover:bg-primary/10 dark:hover:bg-amber-400/10 text-purple-600 dark:text-amber-400 border-purple-300 dark:border-amber-400/50"
                  onClick={() => {
                    // ‰∏¥Êó∂ÁÆÄÂåñÁâàÊú¨
                    const newHour = prompt('ËØ∑ËæìÂÖ•Êñ∞ÁöÑÂá∫ÁîüÊó∂Ëæ∞(0-23):', birthData.hour);
                    if (newHour && !isNaN(Number(newHour)) && Number(newHour) >= 0 && Number(newHour) <= 23) {
                      setBirthData({ hour: newHour });
                      setTimeout(() => {
                        handleCalculate();
                      }, 100);
                    }
                  }}
                >
                  <Clock className="w-4 h-4" />
                  <span>‰øÆÊîπÊó∂Ëæ∞</span>
                </Button>
              </div>
            </div>
            
            <div className="space-y-4 sm:space-y-6">
              {/* Âá∫ÁîüÊó∂Èó¥ÂáÜÁ°ÆÊÄßÊèêÁ§∫ */}
              <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800/30 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <div className="flex-shrink-0 mt-0.5">
                    <Clock className="h-5 w-5 text-amber-600 dark:text-amber-400" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-amber-800 dark:text-amber-200 mb-2">
                      ÈáçË¶ÅÊèêÁ§∫ÔºöÂá∫ÁîüÊó∂Èó¥ÂáÜÁ°ÆÊÄß
                    </h3>
                    <p className="text-amber-700 dark:text-amber-300 text-sm leading-relaxed mb-3">
                      Ê≥®ÊÑèÔºöBaziÂè™Ë¶ÅÁü•ÈÅìÂπ¥ÊúàÊó•ÔºåÂ§ßÊ¶ÇÊúâ75%Â∑¶Âè≥ÁöÑÂáÜÁ°ÆÁéáÔºå‰ΩÜZiwei‰∏çÂêåÂà∞BaziÔºåÂøÖÈ°ªË¶ÅÁü•ÈÅìÂú®Âì™‰∏§‰∏™Â∞èÊó∂ÁöÑÂå∫Èó¥ÂÜÖÔºåÊâçÂèØ‰ª•Ê≠£Á°ÆÊéíÁõò„ÄÇ
                    </p>
                    <p className="text-amber-700 dark:text-amber-300 text-sm leading-relaxed">
                      Áî±‰∫é‰∫∫‰ª¨ÂØπËá™Â∑±Âá∫ÁîüÁöÑÂÖ∑‰ΩìÊó∂ÂàªÂæÄÂæÄËÆ∞Âæó‰∏çÂ§™Ê∏ÖÊ•öÔºåÊâÄ‰ª•ËØ∑Â∞ùËØïÂæÄÂâçÊàñÂæÄÂêé‰∏§‰∏™Â∞èÊó∂ÁöÑÊòüÁõòÔºåÁúãÂÖ∂ÂëΩÂÆ´ÂíåÁñæÂéÑÂÆ´ÁöÑÊòüÊõú‰∏éËá™Â∑±ÁöÑÊÄßÊ†ºÊòØÂê¶ÂåπÈÖçÊù•Á°ÆÂÆöËá™Â∑±ÁöÑÊòüÁõò„ÄÇ
                    </p>
                  </div>
                </div>
              </div>

              <div id="ziwei-chart" className="bg-white dark:bg-slate-800 md:rounded-lg md:shadow-lg mt-0 md:mt-4 p-0 md:p-4">
                <div className="flex items-center justify-between mb-3 p-4 pb-0 xl:pr-0">
                  <h3 className="text-lg font-semibold flex items-center gap-2">
                    <Star className="w-5 h-5 text-purple-500" />
                    Á¥´ÂæÆÊòüÁõò
                  </h3>
                  <button
                    onClick={() => setShowZiweiVsBaziModal(true)}
                    className="p-2 hover:bg-gray-100 dark:hover:bg-slate-700 rounded-full transition-colors"
                    title="Á¥´ÂæÆVSÂÖ´Â≠óÂØπÊØî"
                  >
                    üí°
                  </button>
                </div>
                {/* üî• Êñ∞Â∏ÉÂ±ÄÊñπÊ°àÔºöÂ∑¶‰æßÁªü‰∏ÄÂÆπÂô® + Âè≥‰æß‰ø°ÊÅØÂå∫Âüü (3:2ÊØî‰æã) */}
                <div className="grid grid-cols-1 xl:grid-cols-[3fr_2fr] gap-0 md:gap-4 items-start">
                  {/* Â∑¶‰æßÔºöÊòüÁõò+ÈÄâÊã©Âô®ÁöÑÁªü‰∏ÄÂÆπÂô® (Ê°åÈù¢Á´ØÂç†3/5) */}
                  <div className="w-full max-w-full bg-white dark:bg-slate-800 md:rounded-lg md:border md:border-gray-200 dark:md:border-slate-600 md:shadow-sm overflow-hidden xl:flex-[3]">
                      {/* Áªü‰∏ÄÂÆπÂô®ÔºöÊòüÁõò+ÈÄâÊã©Âô®Êï¥‰ΩìÔºåÂÜÖÈÉ®Êó†ËæπË∑ù */}
                      <div className="bg-white dark:bg-slate-800 rounded-lg overflow-hidden">
                        {/* ÊòüÁõòÂå∫Âüü */}
                        <div>
                    <ZiweiChartWithConnections result={{...ziweiResult, onPalaceClick: handlePalaceClick} as any} />
                  </div>
                  
                        {/* ÈÄâÊã©Âô®Âå∫Âüü - Êó†Èó¥Ë∑ùÁ¥ßÂØÜËøûÊé• */}
                        <div className="border-t border-gray-200 dark:border-slate-600">
                          <div className="space-y-0">
                            {/* Á¨¨‰∏ÄÊéíÔºöÂ§ßËøêÈÄâÊã©Âô® */}
                            <div className="border-b border-gray-200 dark:border-slate-600">
                        <DecadeSelector 
                          decades={ziweiResult.decadePalaces}
                          selectedIndex={selectedDecadeIndex}
                          onSelect={handleDecadeSelect}
                        />
                      </div>
                      
                            {/* Á¨¨‰∫åÊéíÔºöÊµÅÂπ¥ÈÄâÊã©Âô® */}
                            <div>
                      {selectedDecadeIndex !== null && ziweiResult.decadePalaces[selectedDecadeIndex] && (
                          <YearlyLuckSelector
                            birthYear={Number(birthData.year)}
                            selectedDecade={ziweiResult.decadePalaces[selectedDecadeIndex]}
                            selectedIndex={selectedYearlyIndex}
                            onSelect={handleYearlySelect}
                          />
                              )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Âè≥‰æßÔºöÊòüÁõò‰ø°ÊÅØÊèêÁ§∫Âå∫Âüü (Ê°åÈù¢Á´ØÂç†2/5) */}
                  <div className="w-full xl:flex-[2]">
                    <div className="bg-gray-50 dark:bg-slate-700/60 md:rounded-lg md:border md:border-gray-200 dark:md:border-slate-600 p-2 md:p-4 min-h-[200px]">
                      <div className="flex justify-between items-center mb-3">
                          <h4 className="font-bold text-purple-600 dark:text-amber-400">
                          {selectedPalaceForSihua ? `${selectedPalaceForSihua.name} (${selectedPalaceForSihua.heavenlyStem}${selectedPalaceForSihua.branch}) ÂõõÂåñ` : "ÂëΩÁõòËØ¥ÊòéÔºö"}
                          </h4>
                          {selectedPalaceForSihua && (
                            <Button variant="ghost" size="sm" onClick={() => setSelectedPalaceForSihua(null)} className="text-purple-600 dark:text-amber-400 hover:bg-purple-50 dark:hover:bg-amber-400/10 hover:text-purple-700 dark:hover:text-amber-300 h-7">ËøîÂõû</Button>
                          )}
                        </div>
                      <div className="text-sm text-gray-700 dark:text-slate-300">
                        {selectedPalaceForSihua && sihuaDisplay ? (
                          <ul className="space-y-1 font-mono">
                            {sihuaDisplay.map((line, index) => <li key={index}>{line}</li>)}
                          </ul>
                        ) : (
                          <div className="space-y-4">
                            <ul className="list-disc list-inside space-y-2 text-sm">
                              <li>ÁÇπÂáª‰ªªÊÑèÂÆ´‰ΩçÊü•ÁúãÂÖ∂ÂõõÂåñ‰ø°ÊÅØ„ÄÇ</li>
                              <li>ÁÇπÂáª‰∏ãÊñπÂ§ßËøêÈÄâÊã©ÂàáÊç¢ÂçÅÂπ¥ËøêÂäø„ÄÇ</li>
                              <li>ÁÇπÂáªÊµÅÂπ¥ÈÄâÊã©Êü•ÁúãÁâπÂÆöÂπ¥‰ªΩËøêÂäø„ÄÇ</li>
                              <li>ÂëΩÁõò‰∏≠ÁöÑÁ∫¢Ëâ≤Â≠óÊØç‰ª£Ë°®ÂõõÂåñ„ÄÇ</li>
                            </ul>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* ÂÆø‰∏ñÂõ†Áºò */}
              <div id="lai-yin-analysis" className="mt-2 md:mt-4">
                    {ziweiResult && (
                      <LaiYinAnalysis 
                        basePalaces={ziweiResult.basePalaces}
                    className="mt-4"
                      />
                    )}
                </div>

                <div id="ming-gong-analysis" className="mt-2 md:mt-4">
                  {ziweiResult && (
                    <MingGongAnalysisMultilang palaces={ziweiResult.palaces} className="mt-4" />
                    )}
                    </div>
                  
                <div id="birth-year-sihua" className="bg-white dark:bg-slate-800 md:rounded-lg md:shadow-lg mt-2 md:mt-4 p-2 md:p-4">
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <Sparkles className="w-5 h-5 text-purple-500" />
                    ÁîüÂπ¥ÂõõÂåñ
                  </h3>
                  
                  {/* Educational Knowledge Section */}
                  <div className="mb-6">
                    <button
                      onClick={() => setShowSihuaScience(!showSihuaScience)}
                      className="w-full flex items-center justify-between p-3 bg-gray-50 dark:bg-slate-700/40 rounded-lg border border-gray-200 dark:border-slate-600 hover:bg-gray-100 dark:hover:bg-slate-700/60 transition-colors"
                    >
                      <div className="flex items-center gap-2">
                        <Lightbulb className="w-4 h-4 text-purple-500" />
                        <span className="font-medium text-gray-700 dark:text-slate-300">ÁßëÊôÆÁü•ËØÜ</span>
                      </div>
                      <ChevronDown 
                        className={`w-4 h-4 text-gray-500 dark:text-slate-400 transition-transform duration-200 ${
                          showSihuaScience ? 'rotate-180' : ''
                        }`} 
                      />
                    </button>
                    
                    {showSihuaScience && (
                      <div className="mt-3 p-4 border-l-4 border-purple-500 bg-gray-50/50 dark:bg-slate-800/30 space-y-4">
                        <div className="space-y-4">
                          <div>
                            <h4 className="font-semibold mb-2 text-gray-900 dark:text-slate-100 flex items-center gap-2">
                              <span className="w-1.5 h-1.5 bg-purple-500 rounded-full"></span>
                              ‰ªÄ‰πàÊòØÁîüÂπ¥ÂõõÂåñÔºü
                            </h4>
                            <p className="text-gray-600 dark:text-slate-400 text-sm leading-relaxed pl-4">
                        ÁîüÂπ¥ÂõõÂåñÊòØÊ†πÊçÆÂá∫ÁîüÂπ¥‰ªΩÁöÑÂ§©Âπ≤Êù•Á°ÆÂÆöÁöÑÂõõ‰∏™ÂåñÊòüÔºå‰ª£Ë°®ÁùÄ‰∏™‰∫∫ÁöÑÂÖàÂ§©ÁâπË¥®ÂíåÂëΩËøêËµ∞Âêë„ÄÇÂõõÂåñÂàÜÂà´‰∏∫ÂåñÁ¶Ñ„ÄÅÂåñÊùÉ„ÄÅÂåñÁßë„ÄÅÂåñÂøåÔºåÂÆÉ‰ª¨ËêΩÂÖ•‰∏çÂêåÁöÑÂÆ´‰ΩçÂíåÊòüÊõúÔºåÂΩ±ÂìçÁùÄ‰∫∫ÁîüÁöÑÂêÑ‰∏™ÊñπÈù¢„ÄÇ
                      </p>
                          </div>
                          
                          <div>
                            <h4 className="font-semibold mb-2 text-gray-900 dark:text-slate-100 flex items-center gap-2">
                              <span className="w-1.5 h-1.5 bg-purple-500 rounded-full"></span>
                              ÂõõÂåñÁöÑÂê´‰πâ
                            </h4>
                            <div className="space-y-2 pl-4">
                              <div className="border-l-4 border-green-500 pl-3 py-1">
                                <h6 className="font-semibold text-green-600 dark:text-green-400 text-xs mb-1">AÂåñÁ¶Ñ - Á¶èÂæ∑‰πãÁ•û</h6>
                                <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed">‰∏ªÁ¶è‰ªΩ„ÄÅ‰∫´Âèó„ÄÅ‰∫∫Áºò„ÄÅË¥¢Á¶Ñ„ÄÅÂíåË∞ê„ÄÅËß£ÂéÑ</p>
                              </div>
                              <div className="border-l-4 border-purple-500 pl-3 py-1">
                                <h6 className="font-semibold text-purple-600 dark:text-purple-400 text-xs mb-1">BÂåñÊùÉ - ÁîüÊùÄ‰πãÁ•û</h6>
                                <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed">‰∏ªÊàêÂ∞±„ÄÅÁ´û‰∫â„ÄÅÊùÉÂäõ„ÄÅÈú∏ÈÅì„ÄÅÂõ∫Êâß„ÄÅÂ®Å‰∏•</p>
                              </div>
                              <div className="border-l-4 border-blue-500 pl-3 py-1">
                                <h6 className="font-semibold text-blue-600 dark:text-blue-400 text-xs mb-1">CÂåñÁßë - ÊñáÂ¢®‰πãÁ•û</h6>
                                <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed">‰∏ªË¥µ‰∫∫„ÄÅÂêçÂ£∞„ÄÅÊâçËâ∫„ÄÅÁßëÂêç„ÄÅÊÉÖÈù¢„ÄÅÂñÑÁºò</p>
                              </div>
                              <div className="border-l-4 border-red-500 pl-3 py-1">
                                <h6 className="font-semibold text-red-600 dark:text-red-400 text-xs mb-1">DÂåñÂøå - Â§öÁÆ°‰πãÁ•û</h6>
                                <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed">‰∏ªÂèòÂä®„ÄÅÁÅæÈöæ„ÄÅÊòØÈùû„ÄÅÁ†¥ËÄó„ÄÅ‰º§ÂÆ≥„ÄÅÂä≥Á¢å„ÄÅÊ¨†ÂÄ∫</p>
                              </div>
                            </div>
                          </div>
                          
                          <div className="border-l-2 border-purple-300 pl-4 py-2 bg-white/50 dark:bg-slate-800/50">
                            <p className="text-gray-700 dark:text-slate-300 text-sm leading-relaxed flex items-start gap-2">
                              <span className="text-purple-500 mt-0.5">üí°</span>
                              <span>ÂõõÂåñÂàÜÊûêÈúÄË¶ÅÁªìÂêàÊù•Âõ†ÂÆ´‰∏éÂõõÂåñÂÆ´ÁöÑÂÖ≥Á≥ªÊù•ÁªºÂêàÂà§Êñ≠ÂêâÂá∂ÂèòÂåñ„ÄÇ</span>
                            </p>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div className="space-y-6">
                    
                                         {ziweiResult && (() => {
                       const birthYear = Number(birthData.year);
                       // ‰ªéziweiResult‰∏≠Ëé∑ÂèñÊ≠£Á°ÆÁöÑÂπ¥Âπ≤
                       const yearStem = ziweiResult.yearGan;
                      
                      // üî• ‰øÆÂ§çÔºöÁõ¥Êé•‰ΩøÁî®lib‰∏≠ÁöÑÊ†áÂáÜSIHUA_MAP
                      const sihua = SIHUA_MAP[yearStem];
                      if (!sihua) return null;
                      
                      // ËÆ°ÁÆóÁîüÂπ¥ÂõõÂåñÂΩ±ÂìçÂà∞Âì™‰∏™ÂÆ´‰Ωç - ‰øÆÂ§çÔºö‰ΩøÁî®basePalacesÁ°Æ‰øùÂÆ´‰ΩçÂêçÁß∞Ê≠£Á°Æ
                      const calculateSihuaPalaces = () => {
                        const sihuaPalaces: { [key: string]: { palace: string; star: string } | null } = {
                          lu: null,
                          quan: null,
                          ke: null,
                          ji: null
                        };

                        // üî• ‰øÆÂ§çÔºöÁõ¥Êé•‰ΩøÁî®È¢ÑËÆ°ÁÆóÁöÑÂõõÂåñ‰ø°ÊÅØ
                        if (ziweiResult.sihuaInfo) {
                          console.log('üîç ‰ΩøÁî®È¢ÑËÆ°ÁÆóÁöÑÂõõÂåñ‰ø°ÊÅØ:', ziweiResult.sihuaInfo);
                          
                          // Ëß£ÊûêÈ¢ÑËÆ°ÁÆóÁöÑÂõõÂåñ‰ø°ÊÅØ
                          const parseInfo = (info: string) => {
                            if (info.includes('Ôºö')) {
                              const [palace, starWithSuffix] = info.split('Ôºö');
                              const star = starWithSuffix.replace(/[Á¶ÑÊùÉÁßëÂøå]$/, ''); // ÁßªÈô§ÂêéÁºÄ
                              return { palace, star };
                            }
                            return null;
                          };

                          sihuaPalaces.lu = parseInfo(ziweiResult.sihuaInfo.lu);
                          sihuaPalaces.quan = parseInfo(ziweiResult.sihuaInfo.quan);
                          sihuaPalaces.ke = parseInfo(ziweiResult.sihuaInfo.ke);
                          sihuaPalaces.ji = parseInfo(ziweiResult.sihuaInfo.ji);
                          
                          console.log('‚úÖ Ëß£ÊûêÂêéÁöÑÂõõÂåñÂÆ´‰Ωç:', sihuaPalaces);
                        } else {
                          console.warn('‚ö†Ô∏è Ê≤°ÊúâÈ¢ÑËÆ°ÁÆóÁöÑÂõõÂåñ‰ø°ÊÅØÔºå‰ΩøÁî®star.sihuaÂ±ûÊÄßÊü•Êâæ');
                          
                          // ÈÅçÂéÜÊâÄÊúâÂÆ´‰ΩçÔºåÊü•ÊâæÂõõÂåñ - Â§áÁî®ÊñπÊ°à
                          for (const palace of ziweiResult.basePalaces) {
                            if (palace.stars) {
                              for (const star of palace.stars) {
                                if (star.sihua) {
                                  switch (star.sihua) {
                                    case 'A':
                                      sihuaPalaces.lu = { palace: palace.name, star: star.name };
                                      break;
                                    case 'B':
                                      sihuaPalaces.quan = { palace: palace.name, star: star.name };
                                      break;
                                    case 'C':
                                      sihuaPalaces.ke = { palace: palace.name, star: star.name };
                                      break;
                                    case 'D':
                                      sihuaPalaces.ji = { palace: palace.name, star: star.name };
                                      break;
                                  }
                                }
                              }
                            }
                          }
                        }

                        return sihuaPalaces;
                      };

                      const sihuaPalaces = calculateSihuaPalaces();
                      const luInfo = sihuaPalaces.lu;
                      const quanInfo = sihuaPalaces.quan;
                      const keInfo = sihuaPalaces.ke;
                      const jiInfo = sihuaPalaces.ji;
                      
                                             return (
                         <div className="space-y-6">
                                                      {/* Your Birth Year Four Transformations Positions */}
                           <div className="space-y-0">
                               {/* ÂåñÁ¶Ñ‰ΩçÁΩÆ */}
                               <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                                 <div className="flex items-center justify-between mb-2">
                                   <h6 className="font-semibold text-green-600 dark:text-green-400 text-sm flex items-center gap-3">
                                     <span className="w-3 h-3 bg-green-500 rounded-full"></span>
                                     AÂåñÁ¶Ñ
                                   </h6>
                                   <div className="text-right">
                                     {luInfo ? (
                                       <span className="font-medium text-gray-800 dark:text-slate-200 text-sm">
                                         {luInfo.palace}Ôºö{luInfo.star}Á¶Ñ
                                       </span>
                                     ) : (
                                       <span className="text-gray-500 dark:text-slate-400 text-sm">{sihua['Á¶Ñ']}Êú™Âú®ÂëΩÁõò‰∏≠</span>
                                     )}
                                   </div>
                                 </div>
                                 {luInfo && (() => {
                                   const palaceNumberMap: Record<string, number> = {
                                     'ÂëΩÂÆ´': 1, 'ÂÖÑÂºü': 2, 'Â§´Â¶ª': 3, 'Â≠êÂ•≥': 4, 'Ë¥¢Â∏õ': 5, 'ÁñæÂéÑ': 6,
                                     'ËøÅÁßª': 7, '‰∫§Âèã': 8, 'ÂÆòÁ¶Ñ': 9, 'Áî∞ÂÆÖ': 10, 'Á¶èÂæ∑': 11, 'Áà∂ÊØç': 12,
                                     // Ê∑ªÂä†ÂèØËÉΩÁöÑÂÖ∂‰ªñÂÆ´‰ΩçÂêçÁß∞Âèò‰Ωì
                                     'ÂÖÑÂºüÂÆ´': 2, 'Â§´Â¶ªÂÆ´': 3, 'Â≠êÂ•≥ÂÆ´': 4, 'Ë¥¢Â∏õÂÆ´': 5, 'ÁñæÂéÑÂÆ´': 6,
                                     'ËøÅÁßªÂÆ´': 7, '‰∫§ÂèãÂÆ´': 8, 'ÂÆòÁ¶ÑÂÆ´': 9, 'Áî∞ÂÆÖÂÆ´': 10, 'Á¶èÂæ∑ÂÆ´': 11, 'Áà∂ÊØçÂÆ´': 12
                                   };
                                   const palaceNumber = palaceNumberMap[luInfo.palace];
                                   const interpretation = palaceNumber ? getSihuaInterpretation(palaceNumber, luInfo.star, 'A') : null;
                                   const queryKey = palaceNumber ? `${palaceNumber}=${luInfo.star}A` : `Êú™Áü•ÂÆ´‰Ωç=${luInfo.star}A`;
                                   
                                   return (
                                     <div className="text-xs text-gray-600 dark:text-slate-300 leading-relaxed ml-6">
                                       {interpretation ? (
                                         interpretation
                                       ) : (
                                         <div>
                                           <div className="text-gray-500 dark:text-slate-400 mb-1">
                                             ÂÆûÈôÖÂÆ´‰ΩçÂêçÁß∞: "{luInfo.palace}"
                                           </div>
                                           <div className="text-gray-500 dark:text-slate-400 mb-1">
                                             Êü•ËØ¢ÈîÆ: {queryKey}
                                           </div>
                                           <div className="text-gray-500 dark:text-slate-400">
                                             {palaceNumber ? 'Ê≠§ÊòüÊó†ÂåñÁ¶ÑËß£ÈáäËÆ∞ÂΩï' : 'ÂÆ´‰ΩçÂêçÁß∞Êó†Ê≥ïËØÜÂà´ÔºåËØ∑Ê£ÄÊü•Êï∞ÊçÆ'}
                                           </div>
                                         </div>
                                       )}
                                     </div>
                                   );
                                 })()}
                               </div>
                               
                               {/* ÂåñÊùÉ‰ΩçÁΩÆ */}
                               <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                                 <div className="flex items-center justify-between mb-2">
                                   <h6 className="font-semibold text-purple-600 dark:text-purple-400 text-sm flex items-center gap-3">
                                     <span className="w-3 h-3 bg-purple-500 rounded-full"></span>
                                     BÂåñÊùÉ
                                   </h6>
                                   <div className="text-right">
                                     {quanInfo ? (
                                       <span className="font-medium text-gray-800 dark:text-slate-200 text-sm">
                                         {quanInfo.palace}Ôºö{quanInfo.star}ÊùÉ
                                       </span>
                                     ) : (
                                       <span className="text-gray-500 dark:text-slate-400 text-sm">{sihua['ÊùÉ']}Êú™Âú®ÂëΩÁõò‰∏≠</span>
                                     )}
                                   </div>
                                 </div>
                                 {quanInfo && (() => {
                                   const palaceNumberMap: Record<string, number> = {
                                     'ÂëΩÂÆ´': 1, 'ÂÖÑÂºü': 2, 'Â§´Â¶ª': 3, 'Â≠êÂ•≥': 4, 'Ë¥¢Â∏õ': 5, 'ÁñæÂéÑ': 6,
                                     'ËøÅÁßª': 7, '‰∫§Âèã': 8, 'ÂÆòÁ¶Ñ': 9, 'Áî∞ÂÆÖ': 10, 'Á¶èÂæ∑': 11, 'Áà∂ÊØç': 12,
                                     // Ê∑ªÂä†ÂèØËÉΩÁöÑÂÖ∂‰ªñÂÆ´‰ΩçÂêçÁß∞Âèò‰Ωì
                                     'ÂÖÑÂºüÂÆ´': 2, 'Â§´Â¶ªÂÆ´': 3, 'Â≠êÂ•≥ÂÆ´': 4, 'Ë¥¢Â∏õÂÆ´': 5, 'ÁñæÂéÑÂÆ´': 6,
                                     'ËøÅÁßªÂÆ´': 7, '‰∫§ÂèãÂÆ´': 8, 'ÂÆòÁ¶ÑÂÆ´': 9, 'Áî∞ÂÆÖÂÆ´': 10, 'Á¶èÂæ∑ÂÆ´': 11, 'Áà∂ÊØçÂÆ´': 12
                                   };
                                   const palaceNumber = palaceNumberMap[quanInfo.palace];
                                   const interpretation = palaceNumber ? getSihuaInterpretation(palaceNumber, quanInfo.star, 'B') : null;
                                   const queryKey = palaceNumber ? `${palaceNumber}=${quanInfo.star}B` : `Êú™Áü•ÂÆ´‰Ωç=${quanInfo.star}B`;
                                   
                                   return (
                                     <div className="text-xs text-gray-600 dark:text-slate-300 leading-relaxed ml-6">
                                       {interpretation ? (
                                         interpretation
                                       ) : (
                                         <div>
                                           <div className="text-gray-500 dark:text-slate-400 mb-1">
                                             ÂÆûÈôÖÂÆ´‰ΩçÂêçÁß∞: "{quanInfo.palace}"
                                           </div>
                                           <div className="text-gray-500 dark:text-slate-400 mb-1">
                                             Êü•ËØ¢ÈîÆ: {queryKey}
                                           </div>
                                           <div className="text-gray-500 dark:text-slate-400">
                                             {palaceNumber ? 'Ê≠§ÊòüÊó†ÂåñÊùÉËß£ÈáäËÆ∞ÂΩï' : 'ÂÆ´‰ΩçÂêçÁß∞Êó†Ê≥ïËØÜÂà´ÔºåËØ∑Ê£ÄÊü•Êï∞ÊçÆ'}
                                           </div>
                                         </div>
                                       )}
                                     </div>
                                   );
                                 })()}
                               </div>
                               
                               {/* ÂåñÁßë‰ΩçÁΩÆ */}
                               <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                                 <div className="flex items-center justify-between mb-2">
                                   <h6 className="font-semibold text-blue-600 dark:text-blue-400 text-sm flex items-center gap-3">
                                     <span className="w-3 h-3 bg-blue-500 rounded-full"></span>
                                     CÂåñÁßë
                                   </h6>
                                   <div className="text-right">
                                     {keInfo ? (
                                       <span className="font-medium text-gray-800 dark:text-slate-200 text-sm">
                                         {keInfo.palace}Ôºö{keInfo.star}Áßë
                                       </span>
                                     ) : (
                                       <span className="text-gray-500 dark:text-slate-400 text-sm">{sihua['Áßë']}Êú™Âú®ÂëΩÁõò‰∏≠</span>
                                     )}
                                   </div>
                                 </div>
                                 {keInfo && (() => {
                                   const palaceNumberMap: Record<string, number> = {
                                     'ÂëΩÂÆ´': 1, 'ÂÖÑÂºü': 2, 'Â§´Â¶ª': 3, 'Â≠êÂ•≥': 4, 'Ë¥¢Â∏õ': 5, 'ÁñæÂéÑ': 6,
                                     'ËøÅÁßª': 7, '‰∫§Âèã': 8, 'ÂÆòÁ¶Ñ': 9, 'Áî∞ÂÆÖ': 10, 'Á¶èÂæ∑': 11, 'Áà∂ÊØç': 12,
                                     // Ê∑ªÂä†ÂèØËÉΩÁöÑÂÖ∂‰ªñÂÆ´‰ΩçÂêçÁß∞Âèò‰Ωì
                                     'ÂÖÑÂºüÂÆ´': 2, 'Â§´Â¶ªÂÆ´': 3, 'Â≠êÂ•≥ÂÆ´': 4, 'Ë¥¢Â∏õÂÆ´': 5, 'ÁñæÂéÑÂÆ´': 6,
                                     'ËøÅÁßªÂÆ´': 7, '‰∫§ÂèãÂÆ´': 8, 'ÂÆòÁ¶ÑÂÆ´': 9, 'Áî∞ÂÆÖÂÆ´': 10, 'Á¶èÂæ∑ÂÆ´': 11, 'Áà∂ÊØçÂÆ´': 12
                                   };
                                   const palaceNumber = palaceNumberMap[keInfo.palace];
                                   const interpretation = palaceNumber ? getSihuaInterpretation(palaceNumber, keInfo.star, 'C') : null;
                                   const queryKey = palaceNumber ? `${palaceNumber}=${keInfo.star}C` : `Êú™Áü•ÂÆ´‰Ωç=${keInfo.star}C`;
                                   
                                   return (
                                     <div className="text-xs text-gray-600 dark:text-slate-300 leading-relaxed ml-6">
                                       {interpretation ? (
                                         interpretation
                                       ) : (
                                         <div>
                                           <div className="text-gray-500 dark:text-slate-400 mb-1">
                                             ÂÆûÈôÖÂÆ´‰ΩçÂêçÁß∞: "{keInfo.palace}"
                                           </div>
                                           <div className="text-gray-500 dark:text-slate-400 mb-1">
                                             Êü•ËØ¢ÈîÆ: {queryKey}
                                           </div>
                                           <div className="text-gray-500 dark:text-slate-400">
                                             {palaceNumber ? 'Ê≠§ÊòüÊó†ÂåñÁßëËß£ÈáäËÆ∞ÂΩï' : 'ÂÆ´‰ΩçÂêçÁß∞Êó†Ê≥ïËØÜÂà´ÔºåËØ∑Ê£ÄÊü•Êï∞ÊçÆ'}
                                           </div>
                                         </div>
                                       )}
                                     </div>
                                   );
                                 })()}
                               </div>
                               
                               {/* ÂåñÂøå‰ΩçÁΩÆ */}
                               <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                                 <div className="flex items-center justify-between mb-2">
                                   <h6 className="font-semibold text-red-600 dark:text-red-400 text-sm flex items-center gap-3">
                                     <span className="w-3 h-3 bg-red-500 rounded-full"></span>
                                     DÂåñÂøå
                                   </h6>
                                   <div className="text-right">
                                     {jiInfo ? (
                                       <span className="font-medium text-gray-800 dark:text-slate-200 text-sm">
                                         {jiInfo.palace}Ôºö{jiInfo.star}Âøå
                                       </span>
                                     ) : (
                                       <span className="text-gray-500 dark:text-slate-400 text-sm">{sihua['Âøå']}Êú™Âú®ÂëΩÁõò‰∏≠</span>
                                     )}
                                   </div>
                                 </div>
                                 {jiInfo && (() => {
                                   const palaceNumberMap: Record<string, number> = {
                                     'ÂëΩÂÆ´': 1, 'ÂÖÑÂºü': 2, 'Â§´Â¶ª': 3, 'Â≠êÂ•≥': 4, 'Ë¥¢Â∏õ': 5, 'ÁñæÂéÑ': 6,
                                     'ËøÅÁßª': 7, '‰∫§Âèã': 8, 'ÂÆòÁ¶Ñ': 9, 'Áî∞ÂÆÖ': 10, 'Á¶èÂæ∑': 11, 'Áà∂ÊØç': 12,
                                     // Ê∑ªÂä†ÂèØËÉΩÁöÑÂÖ∂‰ªñÂÆ´‰ΩçÂêçÁß∞Âèò‰Ωì
                                     'ÂÖÑÂºüÂÆ´': 2, 'Â§´Â¶ªÂÆ´': 3, 'Â≠êÂ•≥ÂÆ´': 4, 'Ë¥¢Â∏õÂÆ´': 5, 'ÁñæÂéÑÂÆ´': 6,
                                     'ËøÅÁßªÂÆ´': 7, '‰∫§ÂèãÂÆ´': 8, 'ÂÆòÁ¶ÑÂÆ´': 9, 'Áî∞ÂÆÖÂÆ´': 10, 'Á¶èÂæ∑ÂÆ´': 11, 'Áà∂ÊØçÂÆ´': 12
                                   };
                                   const palaceNumber = palaceNumberMap[jiInfo.palace];
                                   const interpretation = palaceNumber ? getSihuaInterpretation(palaceNumber, jiInfo.star, 'D') : null;
                                   const queryKey = palaceNumber ? `${palaceNumber}=${jiInfo.star}D` : `Êú™Áü•ÂÆ´‰Ωç=${jiInfo.star}D`;
                                   
                                   return (
                                     <div className="text-xs text-gray-600 dark:text-slate-300 leading-relaxed ml-6">
                                       {interpretation ? (
                                         interpretation
                                       ) : (
                                         <div>
                                           <div className="text-gray-500 dark:text-slate-400 mb-1">
                                             ÂÆûÈôÖÂÆ´‰ΩçÂêçÁß∞: "{jiInfo.palace}"
                                           </div>
                                           <div className="text-gray-500 dark:text-slate-400 mb-1">
                                             Êü•ËØ¢ÈîÆ: {queryKey}
                                           </div>
                                           <div className="text-gray-500 dark:text-slate-400">
                                             {palaceNumber ? 'Ê≠§ÊòüÊó†ÂåñÂøåËß£ÈáäËÆ∞ÂΩï' : 'ÂÆ´‰ΩçÂêçÁß∞Êó†Ê≥ïËØÜÂà´ÔºåËØ∑Ê£ÄÊü•Êï∞ÊçÆ'}
                                           </div>
                                         </div>
                                       )}
                                     </div>
                                   );
                                 })()}
                               </div>
                           </div>

                           {/* AIÊé®ÁêÜÂàÜÊûê - ÁîüÂπ¥ÂõõÂåñ‰∏éÊù•Âõ†ÂÆ´Ëß£Êûê */}
                           <div className="mt-6 pt-4 border-t border-gray-200 dark:border-slate-600">
                             {(() => {
                               const sihuaAnalysisData = (() => {
                                 // 1. Ê†πÊçÆÁîüÂπ¥Â§©Âπ≤Á°ÆÂÆöÂõõÂåñÊòüÊõú - ‰ΩøÁî®lib‰∏≠ÁöÑÊ†áÂáÜÊò†Â∞Ñ
                                 const sihuaStars = SIHUA_MAP[yearStem];
                                 if (!sihuaStars) {
                                   console.error('Êó†Ê≥ïËé∑ÂèñÁîüÂπ¥ÂõõÂåñÊòüÊõú:', yearStem);
                                   return null;
                                 }
                                 
                                 // ‚úÖ Âè™‰º†ÈÄíÂü∫Á°ÄÊï∞ÊçÆÔºåÊü•ËØ¢ÊûÑÂª∫Âú®AgentÂÜÖÈÉ®ËøõË°å
                                 const analysisData = {
                                   cacheKey: `sihua_${birthData.year}_${birthData.month}_${birthData.day}_${birthData.hour}_${birthData.gender}`,
                                   palaces: ziweiResult.basePalaces, // üî• ‰øÆÂ§çÔºö‰ΩøÁî®basePalacesÁ°Æ‰øùÂõõÂåñÊï∞ÊçÆÊ≠£Á°Æ
                                   yearGan: ziweiResult.yearGan,
                                   ...birthData
                                 };

                                 return analysisData;
                               })();
                               
                               // Âè™ÊúâÊï∞ÊçÆÂÆåÊï¥Êó∂ÊâçÊ∏≤ÊüìÂõõÂåñÂàÜÊûêÁªÑ‰ª∂
                               return sihuaAnalysisData ? (
                                 <SimpleAsyncAnalysis
                                   title="ÂõõÂåñÂàÜÊûêÂ§ßÂ∏à"
                                   analysisType="sihua"
                                   analysisData={sihuaAnalysisData}
                                 />
                               ) : null;
                             })()}
                           </div>
                         </div>
                       );
                    })()}
                  </div>
                </div>

                {/* ÊàëÁöÑË∫´ÂÆ´ */}
                <div id="shen-gong-analysis" className="bg-white dark:bg-slate-800 md:rounded-lg md:shadow-lg mt-2 md:mt-4 p-2 md:p-4">
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <Clock className="w-5 h-5 text-purple-500" />
                    ÊàëÁöÑË∫´ÂÆ´
                  </h3>
                  
                  {/* ÁßëÊôÆÁü•ËØÜ‰∏ãÊãâÂå∫Âüü */}
                  <div className="mb-6">
                    <button
                      onClick={() => setShowShenGongScience(!showShenGongScience)}
                      className="w-full flex items-center justify-between p-3 bg-gray-50 dark:bg-slate-700/40 rounded-lg border border-gray-200 dark:border-slate-600 hover:bg-gray-100 dark:hover:bg-slate-700/60 transition-colors"
                    >
                      <div className="flex items-center gap-2">
                        <Lightbulb className="w-4 h-4 text-purple-500" />
                        <span className="font-medium text-gray-700 dark:text-slate-300">ÁßëÊôÆÁü•ËØÜ</span>
                      </div>
                      <ChevronDown 
                        className={`w-4 h-4 text-gray-500 dark:text-slate-400 transition-transform duration-200 ${
                          showShenGongScience ? 'rotate-180' : ''
                        }`} 
                      />
                    </button>
                    
                    {showShenGongScience && (
                      <div className="mt-3 p-4 border-l-4 border-purple-500 bg-gray-50/50 dark:bg-slate-800/30 space-y-4">
                    <div className="space-y-4">
                          <div>
                            <h4 className="font-semibold mb-2 text-gray-900 dark:text-slate-100 flex items-center gap-2">
                              <span className="w-1.5 h-1.5 bg-purple-500 rounded-full"></span>
                              ‰ªÄ‰πàÊòØË∫´ÂÆ´Ôºü
                            </h4>
                            <p className="text-gray-600 dark:text-slate-400 text-sm leading-relaxed pl-4">
                            Ë∫´ÂÆ´‰ª£Ë°®ÂêéÂ§©ËøêÂäøÔºåÁî±ÂêéÂ§©ÁöÑÂä™ÂäõÔºåÂæÄÂæÄÂèØ‰ª•ÊîπÈÄ†ÂëΩËøêÔºå‰∏∫ËæÖÂä©ÂëΩÂÆ´‰πãÂÆ´Âû£„ÄÇË∫´ÂÆ´ÂøÖÂÆö‰∏éÂëΩÂÆ´„ÄÅÂ§´Â¶ª„ÄÅË¥¢Â∏õ„ÄÅËøÅÁßª„ÄÅÂÆòÁ¶Ñ„ÄÅÁ¶èÂæ∑ÂÆ´ÂêåÂÆ´„ÄÇ
                            </p>
                          </div>
                          
                          <div>
                            <h4 className="font-semibold mb-2 text-gray-900 dark:text-slate-100 flex items-center gap-2">
                              <span className="w-1.5 h-1.5 bg-purple-500 rounded-full"></span>
                              Ë∫´ÂÆ´ÁöÑÈáçË¶ÅÊÄß
                            </h4>
                            <p className="text-gray-600 dark:text-slate-400 text-sm leading-relaxed pl-4">
                              ÂëΩ‰∏ª28Â≤Å‰ª•ÂêéÔºåÂºÄÂêØË∫´ÂÆ´ÔºåÂàôË∫´ÂÆ´ÁöÑÊòüÊõúÁªÑÂêà‰ºöÂØπÂëΩ‰∏ªÁöÑÂêéÂ§©ËøêÂäø‰∫ßÁîüÈáçÂ§ßÁöÑÂΩ±Âìç„ÄÇËÅå‰∏öÂíåÂ§ñË≤å‰ºö‰ªéÂëΩÂÆ´ÂæÄË∫´ÂÆ´ËΩ¨Âèò„ÄÇ
                            </p>
                          </div>
                          
                          <div>
                            <h4 className="font-semibold mb-2 text-gray-900 dark:text-slate-100 flex items-center gap-2">
                              <span className="w-1.5 h-1.5 bg-purple-500 rounded-full"></span>
                              Ë∫´ÂÆ´ÁöÑÂèØËÉΩ‰ΩçÁΩÆ
                            </h4>
                            <div className="pl-4 space-y-2">
                              <div className="text-sm text-gray-600 dark:text-slate-400 grid grid-cols-2 gap-2">
                                <div className="border-l-2 border-purple-300 pl-2">ÂëΩÂÆ´</div>
                                <div className="border-l-2 border-purple-300 pl-2">Â§´Â¶ªÂÆ´</div>
                                <div className="border-l-2 border-purple-300 pl-2">Ë¥¢Â∏õÂÆ´</div>
                                <div className="border-l-2 border-purple-300 pl-2">ËøÅÁßªÂÆ´</div>
                                <div className="border-l-2 border-purple-300 pl-2">ÂÆòÁ¶ÑÂÆ´</div>
                                <div className="border-l-2 border-purple-300 pl-2">Á¶èÂæ∑ÂÆ´</div>
                              </div>
                            </div>
                      </div>
                        </div>
                      </div>
                    )}
                    </div>
                  
                  <div className="space-y-6">



                    {/* Áî®Êà∑ÁöÑË∫´ÂÆ´ÂàÜÊûê */}
                    {ziweiResult && (() => {
                      const shenGongPalace = ziweiResult.basePalaces.find(p => p.isShenGong);
                      if (!shenGongPalace) return null;
                      
                      const palaceName = shenGongPalace.name;
                      const shenGongAnalysis = getShenGongAnalysis(palaceName);
                      const stars = getStarsByType(shenGongPalace.stars || []);
                      
                      return (
                        <div className="space-y-0">
                          {/* Ë∫´ÂÆ´‰ΩçÁΩÆ */}
                          <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-3">
                                <span className="w-3 h-3 bg-purple-500 rounded-full"></span>
                                <h6 className="font-semibold text-purple-700 dark:text-purple-400 text-sm">Ë∫´ÂÆ´‰ΩçÁΩÆ</h6>
                              </div>
                              <div className="text-xs text-gray-500 dark:text-slate-400">
                                {shenGongPalace.heavenlyStem}{shenGongPalace.branch}
                              </div>
                            </div>
                            <div className="ml-6">
                              <div className="flex items-center gap-2 mb-2">
                                <span className="font-medium text-gray-800 dark:text-slate-200 text-sm">
                                  ‰Ω†ÁöÑË∫´ÂÆ´‰Ωç‰∫é{palaceName}
                                </span>
                              </div>
                              <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed">
                                {shenGongAnalysis.description}
                              </p>
                            </div>
                          </div>

                          {/* ÂºÄÂêØÊù°‰ª∂ */}
                          <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                            <div className="flex items-center gap-3 mb-3">
                              <span className="w-3 h-3 bg-amber-500 rounded-full"></span>
                              <h6 className="font-semibold text-amber-700 dark:text-amber-400 text-sm">ÂºÄÂêØÊù°‰ª∂</h6>
                            </div>
                            <div className="ml-6">
                              <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed">
                                {shenGongAnalysis.condition}
                              </p>
                            </div>
                          </div>

                          {/* ÊÄßÊ†ºÁâπË¥®‰∏éËøêÂäøÂΩ±Âìç */}
                          <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                            <div className="flex items-center gap-3 mb-3">
                              <span className="w-3 h-3 bg-blue-500 rounded-full"></span>
                              <h6 className="font-semibold text-blue-700 dark:text-blue-400 text-sm">ÊÄßÊ†ºÁâπË¥®‰∏éËøêÂäøÂΩ±Âìç</h6>
                            </div>
                            <div className="ml-6">
                              <div className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed whitespace-pre-line">
                                {shenGongAnalysis.characteristics}
                              </div>
                            </div>
                          </div>

                          {/* Ë∫´ÂÆ´ÊòüÊõúÈÖçÁΩÆ */}
                          {(stars.mainStars.length > 0 || stars.auxiliaryStars.length > 0) && (
                            <>
                              {stars.mainStars.length > 0 && (
                                <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                                  <div className="flex items-center gap-3 mb-3">
                                    <span className="w-3 h-3 bg-green-500 rounded-full"></span>
                                    <h6 className="font-semibold text-green-700 dark:text-green-400 text-sm">‰∏ªÊòüÈÖçÁΩÆ</h6>
                                  </div>
                                  <div className="ml-6">
                                    <div className="flex flex-wrap gap-1">
                                      {stars.mainStars.map((star, index) => (
                                        <span key={index} className="px-2 py-1 bg-gray-100 dark:bg-slate-700/40 text-gray-800 dark:text-slate-300 rounded text-xs">
                                          {star.name}({star.brightness})
                                          {star.sihua && <span className="ml-1 text-orange-600 dark:text-orange-400 font-bold">{star.sihua}</span>}
                                        </span>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              )}
                              
                              {stars.auxiliaryStars.length > 0 && (
                                <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                                  <div className="flex items-center gap-3 mb-3">
                                    <span className="w-3 h-3 bg-blue-500 rounded-full"></span>
                                    <h6 className="font-semibold text-blue-700 dark:text-blue-400 text-sm">ËæÖÊòüÈÖçÁΩÆ</h6>
                                  </div>
                                  <div className="ml-6">
                                    <div className="flex flex-wrap gap-1">
                                      {stars.auxiliaryStars.map((star, index) => (
                                        <span key={index} className="px-2 py-1 bg-gray-100 dark:bg-slate-700/40 text-gray-800 dark:text-slate-300 rounded text-xs">
                                          {star.name}({star.brightness})
                                          {star.sihua && <span className="ml-1 text-orange-600 dark:text-orange-400 font-bold">{star.sihua}</span>}
                                        </span>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              )}
                            </>
                          )}
                        </div>
                      );
                    })()}
                  </div>
                </div>

                {/* ÂëΩËøê‰πãÁÆ≠ÂàÜÊûê */}
                <div id="destiny-arrow-analysis" className="bg-white dark:bg-slate-800 md:rounded-lg md:shadow-lg mt-2 md:mt-4 p-2 md:p-4">
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <BarChart className="w-5 h-5 text-purple-500" />
                    ÂëΩËøê‰πãÁÆ≠
                  </h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">ÂëΩÂÆ´„ÄÅË¥¢Â∏õÂÆ´„ÄÅÂÆòÁ¶ÑÂÆ´„ÄÅËøÅÁßªÂÆ´ÂõõÂÆ´ËÅîÂä®ÂàÜÊûê</p>
                  <div className="p-6">
                    {(() => {
                      const arrowAnalysis = getDestinyArrowAnalysis(ziweiResult.basePalaces);
                      
                      return (
                                                <div className="space-y-0">
                          {/* ÂëΩËøê‰πãÁÆ≠ÁêÜËÆ∫‰ªãÁªç */}
                          <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                            <div className="mb-4">
                              <h6 className="font-semibold text-purple-700 dark:text-purple-400 text-sm">ÂëΩËøê‰πãÁÆ≠ÁêÜËÆ∫</h6>
                            </div>
                            
                            {/* ÁêÜËÆ∫ÊñπÂùóÂå∫Âüü - Â±Ö‰∏≠ÊòæÁ§∫ */}
                            <div className="flex justify-center">
                              <div className="max-w-md mx-auto space-y-4">
                                {/* ÁêÜËÆ∫Ê¶ÇËø∞ */}
                                <div className="p-3 bg-gray-50 dark:bg-slate-800/30 rounded-lg border border-gray-200 dark:border-slate-600">
                                  <p className="text-gray-700 dark:text-slate-300 text-sm leading-relaxed text-center">
                                    Âú®Á¥´ÂæÆÊñóÊï∞ÁöÑÊòüÁõò‰∏äÔºåÂëΩÂÆ´„ÄÅË¥¢Â∏õÂÆ´„ÄÅÂÆòÁ¶ÑÂÆ´„ÄÅËøÅÁßªÂÆ´ËøôÂõõÂÆ´ÔºåÂ∞±ÂÉè‰∏ÄÊîØËìÑÂäøÂæÖÂèëÁöÑÁÆ≠„ÄÇ
                                  </p>
                                </div>
                                
                                {/* ÂõõÂÆ´ÊñπÂùó‰ªãÁªç */}
                                <div className="grid grid-cols-2 gap-3">
                                  {/* ÂëΩÂÆ´ - ÁÆ≠Â§¥ */}
                                  <div className="p-3 bg-red-50 dark:bg-red-900/10 border border-red-200 dark:border-red-800/30 rounded-lg">
                                    <div className="flex items-center justify-center gap-2 mb-2">
                                      <span className="w-2 h-2 bg-red-500 rounded-full"></span>
                                      <h6 className="font-semibold text-red-700 dark:text-red-400 text-xs">ÂëΩÂÆ´ - ÁÆ≠Â§¥</h6>
                                    </div>
                                    <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed text-center">
                                      ÂÜ≥ÂÆöÊàë‰ª¨Â§©ÁîüÁöÑÊÄßÊ†ºÂíå‰∫∫ÁîüÊñπÂêëÔºåÂÆÉÂ¶ÇÂêåÁÆ≠Â∞ñÂà∫Á†¥Ëø∑ÈõæÁöÑÂäõÈáè
                                    </p>
                                  </div>

                                  {/* ËøÅÁßªÂÆ´ - ÂºìÂº¶ */}
                                  <div className="p-3 bg-green-50 dark:bg-green-900/10 border border-green-200 dark:border-green-800/30 rounded-lg">
                                    <div className="flex items-center justify-center gap-2 mb-2">
                                      <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                                      <h6 className="font-semibold text-green-700 dark:text-green-400 text-xs">ËøÅÁßªÂÆ´ - ÂºìÂº¶</h6>
                                    </div>
                                    <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed text-center">
                                      Ëµã‰∫àÊàë‰ª¨Á™ÅÁ†¥Áé∞Áä∂ÁöÑÂä®ËÉΩÔºåÊú∫ÈÅáÂíåÈÄÇÂ∫îÂäõÂÜ≥ÂÆö‰∫ÜËøôÊîØÁÆ≠ËÉΩÂ∞ÑÂêëÂ§öËøúÁöÑÂ§©Âú∞
                                    </p>
                                  </div>

                                  {/* Ë¥¢Â∏õÂÆ´ - ÁÆ≠Ë∫´ */}
                                  <div className="p-3 bg-yellow-50 dark:bg-yellow-900/10 border border-yellow-200 dark:border-yellow-800/30 rounded-lg">
                                    <div className="flex items-center justify-center gap-2 mb-2">
                                      <span className="w-2 h-2 bg-yellow-500 rounded-full"></span>
                                      <h6 className="font-semibold text-yellow-700 dark:text-yellow-400 text-xs">Ë¥¢Â∏õÂÆ´ - ÁÆ≠Ë∫´</h6>
                                    </div>
                                    <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed text-center">
                                      Êèê‰æõÂâçËøõÊâÄÈúÄÁöÑÁâ©Ë¥®ÊîØÊíëÔºåÊ≤°ÊúâÂéöÂÆûÁöÑÁÆ≠Ë∫´ÔºåÁÆ≠Â§¥ÂÜçÂà©‰πüÈ£û‰∏çËøú
                                    </p>
                                  </div>

                                  {/* ÂÆòÁ¶ÑÂÆ´ - ÁÆ≠ÁæΩ */}
                                  <div className="p-3 bg-blue-50 dark:bg-blue-900/10 border border-blue-200 dark:border-blue-800/30 rounded-lg">
                                    <div className="flex items-center justify-center gap-2 mb-2">
                                      <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                                      <h6 className="font-semibold text-blue-700 dark:text-blue-400 text-xs">ÂÆòÁ¶ÑÂÆ´ - ÁÆ≠ÁæΩ</h6>
                                    </div>
                                    <p className="text-gray-600 dark:text-slate-400 text-xs leading-relaxed text-center">
                                      ÊéåÊéßÈ£ûË°åÁöÑÁ®≥ÂÆöÊÄßÔºå‰∫ã‰∏öÊàêÂ∞±Â¶ÇÂêåÁæΩÊØõË∞ÉËäÇÁùÄ‰∫∫ÁîüËΩ®ËøπÁöÑÂπ≥Ë°°
                                    </p>
                                  </div>
                                </div>
                                
                                {/* ÊÄªÁªì */}
                                <div className="p-3 bg-purple-50 dark:bg-purple-900/10 border border-purple-200 dark:border-purple-800/30 rounded-lg">
                                  <p className="text-gray-700 dark:text-slate-300 text-xs leading-relaxed text-center">
                                    <span className="font-semibold text-purple-600 dark:text-purple-400">Á≤æÂ¶ôËÅîÂä®Ôºö</span>
                                    ÂΩìÂõõÂÆ´ËÉΩÈáèÂíåË∞êÊó∂Ôºå‰∫∫Áîü‰æøÂ¶ÇÁ¶ªÂº¶‰πãÁÆ≠ÔºåÂ∏¶ÁùÄÁ†¥Á©∫‰πãÂäøÂ•îÂêëÁõÆÊ†áÔºõËã•Êüê‰∏ÄÂÆ´‰ΩçËñÑÂº±ÔºåÂ∞±ÂÉèÁÆ≠Ë∫´ÂºØÊõ≤ÊàñÁÆ≠ÁæΩÁº∫ÊçüÔºåÁ∫µÊúâ‰∏áÈíß‰πãÂäõ‰πüÈöæ‰ª•ÂëΩ‰∏≠Èù∂ÂøÉ„ÄÇËøôÁßçÁéØÁéØÁõ∏Êâ£ÁöÑËÅîÂä®ÔºåÊ≠£ÊòØÁ¥´ÂæÆÊñóÊï∞Ê¥ûÂØüÂëΩËøêÁöÑÁ≤æÂ¶ô‰πãÂ§Ñ„ÄÇ
                                  </p>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* ÂëΩÂÆ´ - ÁÆ≠Â§¥ */}
                          <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-3">
                                <span className="w-3 h-3 bg-red-500 rounded-full"></span>
                                <h6 className="font-semibold text-red-700 dark:text-red-400 text-sm">ÂëΩÂÆ´ (ÁÆ≠Â§¥)</h6>
                              </div>
                              <div className="text-xs text-gray-500 dark:text-slate-400">
                                {arrowAnalysis.mingGong?.heavenlyStem}{arrowAnalysis.mingGong?.branch}
                              </div>
                            </div>
                            <div className="ml-6">
                              {arrowAnalysis.mingGong?.stars && arrowAnalysis.mingGong.stars.length > 0 ? (
                                <div className="flex flex-wrap gap-1">
                                  {arrowAnalysis.mingGong.stars.map((star, index) => (
                                    <span key={index} className="px-2 py-1 bg-gray-100 dark:bg-slate-700/40 text-gray-800 dark:text-slate-300 rounded text-xs">
                                      {star.name}({star.brightness})
                                      {star.xiangXinSihua && <span className="ml-1 text-blue-600 dark:text-blue-400 font-bold">i{star.xiangXinSihua}</span>}
                                      {star.liXinSihua && <span className="ml-1 text-purple-600 dark:text-purple-400 font-bold">x{star.liXinSihua}</span>}
                                      {star.sihua && <span className="ml-1 text-orange-600 dark:text-orange-400 font-bold">{star.sihua}</span>}
                                    </span>
                                  ))}
                                </div>
                              ) : (
                                <span className="text-xs text-gray-500 dark:text-slate-400">Êó†ÊòüÊõú</span>
                              )}
                            </div>
                          </div>

                          {/* ËøÅÁßªÂÆ´ - ÂºìÂº¶ */}
                          <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-3">
                                <span className="w-3 h-3 bg-green-500 rounded-full"></span>
                                <h6 className="font-semibold text-green-700 dark:text-green-400 text-sm">ËøÅÁßªÂÆ´ (ÂºìÂº¶)</h6>
                              </div>
                              <div className="text-xs text-gray-500 dark:text-slate-400">
                                {arrowAnalysis.qianYi?.heavenlyStem}{arrowAnalysis.qianYi?.branch}
                              </div>
                            </div>
                            <div className="ml-6">
                              {arrowAnalysis.qianYi?.stars && arrowAnalysis.qianYi.stars.length > 0 ? (
                                <div className="flex flex-wrap gap-1">
                                  {arrowAnalysis.qianYi.stars.map((star, index) => (
                                    <span key={index} className="px-2 py-1 bg-gray-100 dark:bg-slate-700/40 text-gray-800 dark:text-slate-300 rounded text-xs">
                                      {star.name}({star.brightness})
                                      {star.xiangXinSihua && <span className="ml-1 text-blue-600 dark:text-blue-400 font-bold">i{star.xiangXinSihua}</span>}
                                      {star.liXinSihua && <span className="ml-1 text-purple-600 dark:text-purple-400 font-bold">x{star.liXinSihua}</span>}
                                      {star.sihua && <span className="ml-1 text-orange-600 dark:text-orange-400 font-bold">{star.sihua}</span>}
                                    </span>
                                  ))}
                                </div>
                              ) : (
                                <span className="text-xs text-gray-500 dark:text-slate-400">Êó†ÊòüÊõú</span>
                              )}
                            </div>
                          </div>

                          {/* Ë¥¢Â∏õÂÆ´ - ÁÆ≠Ë∫´ */}
                          <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-3">
                                <span className="w-3 h-3 bg-yellow-500 rounded-full"></span>
                                <h6 className="font-semibold text-yellow-700 dark:text-yellow-400 text-sm">Ë¥¢Â∏õÂÆ´ (ÁÆ≠Ë∫´)</h6>
                              </div>
                              <div className="text-xs text-gray-500 dark:text-slate-400">
                                {arrowAnalysis.caiPo?.heavenlyStem}{arrowAnalysis.caiPo?.branch}
                              </div>
                            </div>
                            <div className="ml-6">
                              {arrowAnalysis.caiPo?.stars && arrowAnalysis.caiPo.stars.length > 0 ? (
                                <div className="flex flex-wrap gap-1">
                                  {arrowAnalysis.caiPo.stars.map((star, index) => (
                                    <span key={index} className="px-2 py-1 bg-gray-100 dark:bg-slate-700/40 text-gray-800 dark:text-slate-300 rounded text-xs">
                                      {star.name}({star.brightness})
                                      {star.xiangXinSihua && <span className="ml-1 text-blue-600 dark:text-blue-400 font-bold">i{star.xiangXinSihua}</span>}
                                      {star.liXinSihua && <span className="ml-1 text-purple-600 dark:text-purple-400 font-bold">x{star.liXinSihua}</span>}
                                      {star.sihua && <span className="ml-1 text-orange-600 dark:text-orange-400 font-bold">{star.sihua}</span>}
                                    </span>
                                  ))}
                                </div>
                              ) : (
                                <span className="text-xs text-gray-500 dark:text-slate-400">Êó†ÊòüÊõú</span>
                              )}
                            </div>
                          </div>

                          {/* ÂÆòÁ¶ÑÂÆ´ - ÁÆ≠ÁæΩ */}
                          <div className="py-4 border-b border-gray-100 dark:border-slate-700">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-3">
                                <span className="w-3 h-3 bg-blue-500 rounded-full"></span>
                                <h6 className="font-semibold text-blue-700 dark:text-blue-400 text-sm">ÂÆòÁ¶ÑÂÆ´ (ÁÆ≠ÁæΩ)</h6>
                              </div>
                              <div className="text-xs text-gray-500 dark:text-slate-400">
                                {arrowAnalysis.guanLu?.heavenlyStem}{arrowAnalysis.guanLu?.branch}
                              </div>
                            </div>
                            <div className="ml-6">
                              {arrowAnalysis.guanLu?.stars && arrowAnalysis.guanLu.stars.length > 0 ? (
                                <div className="flex flex-wrap gap-1">
                                  {arrowAnalysis.guanLu.stars.map((star, index) => (
                                    <span key={index} className="px-2 py-1 bg-gray-100 dark:bg-slate-700/40 text-gray-800 dark:text-slate-300 rounded text-xs">
                                      {star.name}({star.brightness})
                                      {star.xiangXinSihua && <span className="ml-1 text-blue-600 dark:text-blue-400 font-bold">i{star.xiangXinSihua}</span>}
                                      {star.liXinSihua && <span className="ml-1 text-purple-600 dark:text-purple-400 font-bold">x{star.liXinSihua}</span>}
                                      {star.sihua && <span className="ml-1 text-orange-600 dark:text-orange-400 font-bold">{star.sihua}</span>}
                                    </span>
                                  ))}
                                </div>
                              ) : (
                                <span className="text-xs text-gray-500 dark:text-slate-400">Êó†ÊòüÊõú</span>
                              )}
                            </div>
                          </div>
                            
                            {/* Á¥´ÂæÆÊé®ÁêÜAIÂàÜÊûê */}
                            <div className="mt-6 pt-4 border-t border-gray-200 dark:border-slate-600">
                              <SimpleAsyncAnalysis
                                title="Á¥´ÂæÆÊé®ÁêÜÂ§ßÂ∏à"
                                analysisType="ziwei"
                                analysisData={{
                                  ...birthData,
                                  cacheKey: `ziwei_${birthData.year}_${birthData.month}_${birthData.day}_${birthData.hour}_${birthData.gender}`,
                                  palaceData: arrowAnalysis,
                                  sihuaInfo: ziweiResult.sihuaInfo, // üî• Áõ¥Êé•‰ΩøÁî®È¢ÑËÆ°ÁÆóÁöÑÂõõÂåñ‰ø°ÊÅØ
                                  mingGong: {
                                    name: 'ÂëΩÂÆ´',
                                    position: `${arrowAnalysis.mingGong?.heavenlyStem}${arrowAnalysis.mingGong?.branch}`,
                                    stars: arrowAnalysis.mingGong?.stars?.map(star => {
                                      let result = `${star.name}(${star.brightness})`
                                      if (star.xiangXinSihua) result += `i${star.xiangXinSihua}`
                                      if (star.liXinSihua) result += `x${star.liXinSihua}`
                                      if (star.sihua) result += star.sihua
                                      return result
                                    }).join('„ÄÅ') || 'Êó†ÊòüÊõú'
                                  },
                                  qianYi: {
                                    name: 'ËøÅÁßªÂÆ´',
                                    position: `${arrowAnalysis.qianYi?.heavenlyStem}${arrowAnalysis.qianYi?.branch}`,
                                    stars: arrowAnalysis.qianYi?.stars?.map(star => {
                                      let result = `${star.name}(${star.brightness})`
                                      if (star.xiangXinSihua) result += `i${star.xiangXinSihua}`
                                      if (star.liXinSihua) result += `x${star.liXinSihua}`
                                      if (star.sihua) result += star.sihua
                                      return result
                                    }).join('„ÄÅ') || 'Êó†ÊòüÊõú'
                                  },
                                  caiPo: {
                                    name: 'Ë¥¢Â∏õÂÆ´',
                                    position: `${arrowAnalysis.caiPo?.heavenlyStem}${arrowAnalysis.caiPo?.branch}`,
                                    stars: arrowAnalysis.caiPo?.stars?.map(star => {
                                      let result = `${star.name}(${star.brightness})`
                                      if (star.xiangXinSihua) result += `i${star.xiangXinSihua}`
                                      if (star.liXinSihua) result += `x${star.liXinSihua}`
                                      if (star.sihua) result += star.sihua
                                      return result
                                    }).join('„ÄÅ') || 'Êó†ÊòüÊõú'
                                  },
                                  guanLu: {
                                    name: 'ÂÆòÁ¶ÑÂÆ´',
                                    position: `${arrowAnalysis.guanLu?.heavenlyStem}${arrowAnalysis.guanLu?.branch}`,
                                    stars: arrowAnalysis.guanLu?.stars?.map(star => {
                                      let result = `${star.name}(${star.brightness})`
                                      if (star.xiangXinSihua) result += `i${star.xiangXinSihua}`
                                      if (star.liXinSihua) result += `x${star.liXinSihua}`
                                      if (star.sihua) result += star.sihua
                                      return result
                                    }).join('„ÄÅ') || 'Êó†ÊòüÊõú'
                                  }
                                }}
                              />
                            </div>
                        </div>
                      );
                    })()}
                  </div>
                </div>
            </div>
          </div>
        ) : (
          <div>
            <h2 className="text-xl font-semibold text-purple-600 dark:text-purple-400 mb-4">
              {isEnglish ? 'Birth Information' : 'Âá∫Áîü‰ø°ÊÅØ'}
            </h2>
            <div className="space-y-4">
              {/* Name */}
              <div>
                <label className="flex items-center text-sm font-medium text-gray-700 dark:text-slate-300 mb-1">
                  <User className="w-4 h-4 mr-2" />
                  {isEnglish ? 'Name' : 'ÂßìÂêç'}
                </label>
                <Input
                  id="username"
                  type="text"
                  placeholder={isEnglish ? "Enter name" : "ËØ∑ËæìÂÖ•ÂßìÂêç"}
                  value={birthData.username}
                  onChange={(e) => setBirthData({ ...birthData, username: e.target.value })}
                  className="border-gray-300 focus:border-purple-500 focus:ring-purple-500 dark:bg-slate-800 dark:border-slate-600"
                />
              </div>
              {/* Gender and Category - Same Row */}
              <div className="grid grid-cols-2 gap-3">
                {/* Gender */}
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-1 block">
                    {isEnglish ? 'Gender' : 'ÊÄßÂà´'}
                  </label>
                  <div className="grid grid-cols-2 gap-2">
                    <button
                      type="button"
                      onClick={() => setBirthData({ ...birthData, gender: "male" })}
                      className={`py-2 px-3 rounded-md text-sm font-medium transition-colors ${
                        birthData.gender === 'male'
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {isEnglish ? 'Male' : 'Áî∑'}
                    </button>
                    <button
                      type="button"
                      onClick={() => setBirthData({ ...birthData, gender: "female" })}
                      className={`py-2 px-3 rounded-md text-sm font-medium transition-colors ${
                        birthData.gender === 'female'
                          ? 'bg-pink-500 text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {isEnglish ? 'Female' : 'Â•≥'}
                    </button>
                  </div>
                </div>

                {/* Save Category */}
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-1 block">
                    {isEnglish ? 'Category' : 'ÂàÜÁ±ª'}
                  </label>
                  <Select value={birthData.category} onValueChange={(value) => setBirthData({ ...birthData, category: value })}>
                    <SelectTrigger className="border-gray-300 focus:border-purple-500 focus:ring-purple-500">
                      <SelectValue placeholder={isEnglish ? "Select category" : "ÈÄâÊã©Á±ªÂà´"} />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map((category) => (
                        <SelectItem key={category.key} value={category.key}>
                          <div className="flex items-center">
                            <span className="mr-2">{category.icon}</span>
                            {category.label}
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-6 lg:mb-8">
                <div>
                  <Label htmlFor="year" className="text-[#3D0B5B] dark:text-[#FBCB0A] text-base lg:text-lg font-semibold font-rajdhani text-center">
                    {isEnglish ? 'Birth Year' : 'Âá∫ÁîüÂπ¥'}
                  </Label>
                  <Input
                    id="year"
                    type="number"
                    placeholder="1990"
                    value={birthData.year}
                    onChange={(e) => setBirthData({ ...birthData, year: e.target.value })}
                    className="mt-2 font-rajdhani border-[#3D0B5B]/30 dark:border-[#FBCB0A]/30 focus:border-[#3D0B5B] dark:focus:border-[#FBCB0A] focus:ring-[#3D0B5B]/20 dark:focus:ring-[#FBCB0A]/20 bg-white/95 dark:bg-[#1A2242]/80 text-[#333333] dark:text-[#E0E0E0] placeholder-[#333333]/50 dark:placeholder-[#E0E0E0]/50"
                  />
                </div>
                <div>
                  <Label htmlFor="month" className="text-[#3D0B5B] dark:text-[#FBCB0A] text-base lg:text-lg font-semibold font-rajdhani text-center">
                    {isEnglish ? 'Birth Month' : 'Âá∫ÁîüÊúà'}
                  </Label>
                  <Select value={birthData.month} onValueChange={(value) => setBirthData({ ...birthData, month: value })}>
                  <SelectTrigger className="mt-2 font-rajdhani border-[#3D0B5B]/30 dark:border-[#FBCB0A]/30 focus:border-[#3D0B5B] dark:focus:border-[#FBCB0A] focus:ring-[#3D0B5B]/20 dark:focus:ring-[#FBCB0A]/20 bg-white/95 dark:bg-[#1A2242]/80 text-[#333333] dark:text-[#E0E0E0]">
                      <SelectValue placeholder={isEnglish ? "Select month" : "ÈÄâÊã©Êúà‰ªΩ"} />
                  </SelectTrigger>
                  <SelectContent className="bg-white/95 dark:bg-[#1A2242]/95 backdrop-blur-sm border-[#3D0B5B]/20 dark:border-[#FBCB0A]/20 rounded-xl">
                    {Array.from({ length: 12 }, (_, i) => (
                      <SelectItem key={i + 1} value={(i + 1).toString()} className="text-[#333333] dark:text-[#E0E0E0] hover:bg-[#3D0B5B]/10 dark:hover:bg-[#FBCB0A]/10 font-rajdhani">
                          {isEnglish ? `Month ${i + 1}` : `${i + 1}Êúà`}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="day" className="text-[#3D0B5B] dark:text-[#FBCB0A] text-base lg:text-lg font-semibold font-rajdhani text-center">
                    {isEnglish ? 'Birth Day' : 'Âá∫ÁîüÊó•'}
                  </Label>
                  <Select value={birthData.day} onValueChange={(value) => setBirthData({ ...birthData, day: value })}>
                  <SelectTrigger className="mt-2 font-rajdhani border-[#3D0B5B]/30 dark:border-[#FBCB0A]/30 focus:border-[#3D0B5B] dark:focus:border-[#FBCB0A] focus:ring-[#3D0B5B]/20 dark:focus:ring-[#FBCB0A]/20 bg-white/95 dark:bg-[#1A2242]/80 text-[#333333] dark:text-[#E0E0E0]">
                      <SelectValue placeholder={isEnglish ? "Select day" : "ÈÄâÊã©Êó•Êúü"} />
                  </SelectTrigger>
                  <SelectContent className="bg-white/95 dark:bg-[#1A2242]/95 backdrop-blur-sm border-[#3D0B5B]/20 dark:border-[#FBCB0A]/20 rounded-xl">
                    {Array.from({ length: 31 }, (_, i) => (
                      <SelectItem key={i + 1} value={(i + 1).toString()} className="text-[#333333] dark:text-[#E0E0E0] hover:bg-[#3D0B5B]/10 dark:hover:bg-[#FBCB0A]/10 font-rajdhani">
                          {isEnglish ? `Day ${i + 1}` : `${i + 1}Êó•`}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="hour" className="text-[#3D0B5B] dark:text-[#FBCB0A] text-base lg:text-lg font-semibold font-rajdhani text-center">
                    {isEnglish ? 'Birth Hour (24h)' : 'Âá∫ÁîüÊó∂Ëæ∞'}
                  </Label>
                    <Select value={birthData.hour} onValueChange={(value) => setBirthData({ ...birthData, hour: value })}>
                      <SelectTrigger className="border-gray-300 focus:border-purple-500 focus:ring-purple-500">
                        <SelectValue placeholder={isEnglish ? "Hour" : "Êó∂"} />
                      </SelectTrigger>
                      <SelectContent className="max-h-60">
                        {Array.from({ length: 24 }, (_, i) => (
                          <SelectItem key={i} value={i.toString()}>
                            {isEnglish ? `${i}:00-${(i + 1) % 24}:00` : `${i}Êó∂`}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

            
            {/* Save Button */}
            <div className="pt-2 mt-6">
              <Button 
                onClick={handleCalculate} 
                disabled={isCalculating || !birthData.username || !birthData.year || !birthData.month || !birthData.day || !birthData.hour || !birthData.gender}
                className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-medium py-2.5 disabled:opacity-50"
              >
                {isCalculating 
                  ? (isEnglish ? 'Calculating...' : 'ËÆ°ÁÆó‰∏≠...') 
                  : (isEnglish ? 'Save and Start Analysis' : '‰øùÂ≠òÂπ∂ÂºÄÂßãÂàÜÊûê')
                }
              </Button>
              
              {ziweiResult && (
                <Button 
                  onClick={handleSave} 
                  className="w-full mt-3 bg-purple-100 hover:bg-purple-200 text-purple-700 border border-purple-300 py-2.5"
                >
                  <Save className="mr-2 h-4 w-4" />
                  {isEnglish ? 'Save Chart' : '‰øùÂ≠òÂëΩÁõò'}
                </Button>
              )}
            </div>
          </div>
        )}
      </div>
      
      {/* AIÂàÜÊûêÁªìÊûúÂºπÁ™ó */}
      <Dialog open={aiDialogOpen} onOpenChange={setAiDialogOpen}>
        <DialogContent className="max-w-4xl max-h-[85vh] overflow-hidden bg-white/95 dark:bg-[#1A2242]/95 backdrop-blur-sm border border-[#3D0B5B]/20 dark:border-[#FBCB0A]/20 rounded-xl flex flex-col">
          <DialogHeader className="flex-shrink-0">
            <DialogTitle className="flex items-center justify-center gap-2 text-xl font-bold text-[#3D0B5B] dark:text-[#FBCB0A] font-rajdhani">
              <Bot className="w-6 h-6" />
              Destiny Arrow - AI Pattern Analysis
            </DialogTitle>
          </DialogHeader>
          
          <div className="mt-4 flex-1 overflow-y-auto pr-2">
            <div className="space-y-4">
              <div className="whitespace-pre-wrap text-gray-800 dark:text-slate-200 leading-relaxed text-sm">
                {(() => {
                  // ÊòæÁ§∫Êú¨Âú∞ÁºìÂ≠òÁöÑÂàÜÊûêÁªìÊûú
                  const existingAnalysis = checkExistingAnalysis();
                  if (existingAnalysis) {
                    return existingAnalysis.result;
                  }
                  return 'Please click the Zi Wei Astrology Master button below to start analysis';
                })()}
              </div>
              
              {/* ÂàÜÊûêÂÆåÊàêÊèêÁ§∫ */}
              {checkExistingAnalysis() && (
                <div className="mt-6 pt-4 border-t border-gray-200 dark:border-slate-600">
                  <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-slate-400">
                    <span>‚ú® Professional Zi Wei analysis complete</span>
                    <span>‚Ä¢ Based on traditional Zi Wei Dou Shu theory</span>
                    <span>‚Ä¢ From cache</span>
                  </div>
                </div>
              )}
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Ë¥≠‰π∞Ê¨°Êï∞ÂØπËØùÊ°Ü */}
      <PurchaseDialog 
        open={showPurchaseDialog} 
        onOpenChange={setShowPurchaseDialog}
      />

      {/* Á¥´ÂæÆVSÂÖ´Â≠óÂØπÊØîÂºπÁ™ó */}
      <Dialog open={showZiweiVsBaziModal} onOpenChange={setShowZiweiVsBaziModal}>
        <DialogContent className="max-w-4xl max-h-[85vh] overflow-hidden bg-white/95 dark:bg-[#1A2242]/95 backdrop-blur-sm border border-[#3D0B5B]/20 dark:border-[#FBCB0A]/20 rounded-xl flex flex-col">
          <DialogHeader className="flex-shrink-0">
            <DialogTitle className="flex items-center justify-center gap-2 text-xl font-bold text-[#3D0B5B] dark:text-[#FBCB0A] font-rajdhani">
              üí° Á¥´ÂæÆÊñóÊï∞ VS ÂÖ´Â≠óÂëΩÁêÜ
            </DialogTitle>
          </DialogHeader>
          
          <div className="mt-4 flex-1 overflow-y-auto pr-2">
            <div className="space-y-6">
              {/* Âü∫Êú¨‰ªãÁªç */}
              <div className="p-4 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-lg border border-purple-200 dark:border-purple-800/30">
                <h3 className="text-lg font-semibold text-purple-700 dark:text-purple-400 mb-3">‰∏§Â§ßÂëΩÁêÜ‰ΩìÁ≥ªÁöÑÊô∫ÊÖßÂØπÊØî</h3>
                <p className="text-gray-700 dark:text-slate-300 leading-relaxed">
                  Á¥´ÂæÆÊñóÊï∞ÂíåÂÖ´Â≠óÂëΩÁêÜÈÉΩÊòØ‰∏≠Âçé‰º†ÁªüÊñáÂåñ‰∏≠ÁöÑÁë∞ÂÆùÔºåÂÆÉ‰ª¨‰ªé‰∏çÂêåËßíÂ∫¶Êè≠Á§∫‰∫∫ÁîüÁöÑÂ••Áßò„ÄÇ‰∫ÜËß£‰∏§ËÄÖÁöÑÁâπÁÇπÔºåÊúâÂä©‰∫éÊÇ®Êõ¥ÂÖ®Èù¢Âú∞ËÆ§ËØÜËá™Â∑±ÁöÑÂëΩËøê„ÄÇ
                </p>
              </div>

              {/* ÂØπÊØîË°®Ê†º */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Á¥´ÂæÆÊñóÊï∞ */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-purple-600 dark:text-purple-400 flex items-center gap-2">
                    <Star className="w-5 h-5" />
                    Á¥´ÂæÆÊñóÊï∞
                  </h3>
                  
                  <div className="space-y-3">
                    <div className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                      <h4 className="font-semibold text-purple-700 dark:text-purple-300 text-sm mb-2">üìä ÂàÜÊûêÊñπÂºè</h4>
                      <p className="text-gray-600 dark:text-slate-400 text-sm">
                        ‰ª•ÊòüÁõò‰∏∫Ê†∏ÂøÉÔºåÈÄöËøáÂçÅ‰∫åÂÆ´‰ΩçÂíå108È¢óÊòüÊõúÁöÑÁªÑÂêàÔºåÊèê‰æõÁõ¥ËßÇÁöÑËßÜËßâÂåñÂàÜÊûê
                      </p>
                    </div>
                    
                    <div className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                      <h4 className="font-semibold text-purple-700 dark:text-purple-300 text-sm mb-2">üéØ ÂàÜÊûêÈáçÁÇπ</h4>
                      <p className="text-gray-600 dark:text-slate-400 text-sm">
                        ‰æßÈáç‰∫∫ÁîüÊ†ºÂ±Ä„ÄÅÊÄßÊ†ºÁâπË¥®„ÄÅ‰∫∫ÈôÖÂÖ≥Á≥ª„ÄÅ‰∫ã‰∏öÂèëÂ±ïÁ≠âÂÆèËßÇÂ±ÇÈù¢ÁöÑÂàÜÊûê
                      </p>
                    </div>
                    
                    <div className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                      <h4 className="font-semibold text-purple-700 dark:text-purple-300 text-sm mb-2">‚≠ê Áã¨Áâπ‰ºòÂäø</h4>
                      <p className="text-gray-600 dark:text-slate-400 text-sm">
                        ÊòüÁõòÁõ¥ËßÇÊòìÊáÇÔºåÂÆ´‰ΩçÊ¶ÇÂøµÊ∏ÖÊô∞ÔºåÂõõÂåñÂàÜÊûêÊ∑±ÂÖ•ÔºåÈÄÇÂêàÂÖ®Èù¢‰∫ÜËß£‰∫∫ÁîüÂêÑ‰∏™ÊñπÈù¢
                      </p>
                    </div>
                    
                    <div className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                      <h4 className="font-semibold text-purple-700 dark:text-purple-300 text-sm mb-2">üìà È¢ÑÊµãÁâπËâ≤</h4>
                      <p className="text-gray-600 dark:text-slate-400 text-sm">
                        Â§ßËøêÊµÅÂπ¥ÂàÜÊûêÔºåÂõõÂåñÈ£ûÊòüÈ¢ÑÊµãÔºåÊìÖÈïø‰∏≠ÈïøÊúüËøêÂäøÂàÜÊûêÂíå‰∫∫ÁîüËßÑÂàíÊåáÂØº
                      </p>
                    </div>
                  </div>
                </div>

                {/* ÂÖ´Â≠óÂëΩÁêÜ */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-amber-600 dark:text-amber-400 flex items-center gap-2">
                    <Sparkles className="w-5 h-5" />
                    ÂÖ´Â≠óÂëΩÁêÜ
                  </h3>
                  
                  <div className="space-y-3">
                    <div className="p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg">
                      <h4 className="font-semibold text-amber-700 dark:text-amber-300 text-sm mb-2">üìä ÂàÜÊûêÊñπÂºè</h4>
                      <p className="text-gray-600 dark:text-slate-400 text-sm">
                        Âü∫‰∫éÂõõÊü±ÂÖ´Â≠óÔºàÂπ¥ÊúàÊó•Êó∂ÔºâÔºåÈÄöËøá‰∫îË°åÁîüÂÖãÂà∂ÂåñÂÖ≥Á≥ªËøõË°åÁ≤æÂØÜÊé®ÁÆó
                      </p>
                    </div>
                    
                    <div className="p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg">
                      <h4 className="font-semibold text-amber-700 dark:text-amber-300 text-sm mb-2">üéØ ÂàÜÊûêÈáçÁÇπ</h4>
                      <p className="text-gray-600 dark:text-slate-400 text-sm">
                        ‰∏ìÊ≥®‰∫îË°åÂπ≥Ë°°„ÄÅÁî®Á•ûÂàÜÊûê„ÄÅË¥¢ÂÆòÂç∞È£üÁöÑÂÖ∑‰ΩìËøêÁî®ÂíåÁªÜËá¥ÁöÑÊó∂Èó¥È¢ÑÊµã
                      </p>
                    </div>
                    
                    <div className="p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg">
                      <h4 className="font-semibold text-amber-700 dark:text-amber-300 text-sm mb-2">‚≠ê Áã¨Áâπ‰ºòÂäø</h4>
                      <p className="text-gray-600 dark:text-slate-400 text-sm">
                        ÁêÜËÆ∫‰∏•Ë∞®ÔºåÈÄªËæëÊÄßÂº∫Ôºå‰∫îË°åÂàÜÊûêÊ∑±ÂÖ•ÔºåÊìÖÈïøÁ≤æÁ°ÆÁöÑÂëΩËøêÊé®ÁÆóÂíåË∂ãÂäøÂà§Êñ≠
                      </p>
                    </div>
                    
                    <div className="p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg">
                      <h4 className="font-semibold text-amber-700 dark:text-amber-300 text-sm mb-2">üìà È¢ÑÊµãÁâπËâ≤</h4>
                      <p className="text-gray-600 dark:text-slate-400 text-sm">
                        Â§ßËøêÊµÅÂπ¥ÁªÜËá¥ÂàÜÊûêÔºå‰∫îË°åÊó∫Ë°∞ÂèòÂåñÔºåÊìÖÈïøÂÖ∑‰Ωì‰∫ã‰ª∂ÁöÑÊó∂Èó¥È¢ÑÊµãÂíåÂêâÂá∂Âà§Êñ≠
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Â∫îÁî®Âª∫ËÆÆ */}
              <div className="p-4 bg-gradient-to-r from-blue-50 to-green-50 dark:from-blue-900/20 dark:to-green-900/20 rounded-lg border border-blue-200 dark:border-blue-800/30">
                <h3 className="text-lg font-semibold text-blue-700 dark:text-blue-400 mb-3">üí° ‰ΩøÁî®Âª∫ËÆÆ</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-semibold text-purple-600 dark:text-purple-400 text-sm mb-2">ÈÄÇÂêàÈÄâÊã©Á¥´ÂæÆÊñóÊï∞</h4>
                    <ul className="text-gray-600 dark:text-slate-400 text-sm space-y-1">
                      <li>‚Ä¢ Â∏åÊúõÂÖ®Èù¢‰∫ÜËß£‰∫∫ÁîüÊ†ºÂ±Ä</li>
                      <li>‚Ä¢ ÂÖ≥Ê≥®‰∫∫ÈôÖÂÖ≥Á≥ªÂíå‰∫ã‰∏öÂèëÂ±ï</li>
                      <li>‚Ä¢ ÂñúÊ¨¢Áõ¥ËßÇÁöÑÊòüÁõòÂàÜÊûê</li>
                      <li>‚Ä¢ ÈúÄË¶Å‰∏≠ÈïøÊúü‰∫∫ÁîüËßÑÂàí</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-amber-600 dark:text-amber-400 text-sm mb-2">ÈÄÇÂêàÈÄâÊã©ÂÖ´Â≠óÂëΩÁêÜ</h4>
                    <ul className="text-gray-600 dark:text-slate-400 text-sm space-y-1">
                      <li>‚Ä¢ ËøΩÊ±ÇÁ≤æÁ°ÆÁöÑÊó∂Èó¥È¢ÑÊµã</li>
                      <li>‚Ä¢ ÂÖ≥Ê≥®‰∫îË°åÂπ≥Ë°°Ë∞ÉÁêÜ</li>
                      <li>‚Ä¢ ÂñúÊ¨¢ÈÄªËæëÊÄßÂº∫ÁöÑÂàÜÊûê</li>
                      <li>‚Ä¢ ÈúÄË¶ÅÂÖ∑‰Ωì‰∫ã‰ª∂ÁöÑÂêâÂá∂Âà§Êñ≠</li>
                    </ul>
                  </div>
                </div>
              </div>

              {/* ÁªìÂêà‰ΩøÁî® */}
              <div className="p-4 bg-gradient-to-r from-green-50 to-purple-50 dark:from-green-900/20 dark:to-purple-900/20 rounded-lg border border-green-200 dark:border-green-800/30">
                <h3 className="text-lg font-semibold text-green-700 dark:text-green-400 mb-3">üåü ÊúÄ‰Ω≥ÂÆûË∑µ</h3>
                <p className="text-gray-700 dark:text-slate-300 leading-relaxed mb-3">
                  ‰∏§‰∏™‰ΩìÁ≥ªÂêÑÊúâ‰ºòÂäøÔºåÁªìÂêà‰ΩøÁî®ÊïàÊûúÊõ¥‰Ω≥Ôºö
                </p>
                <ul className="text-gray-600 dark:text-slate-400 text-sm space-y-2">
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    <span>Áî®Á¥´ÂæÆÊñóÊï∞‰∫ÜËß£Êï¥‰ΩìÊ†ºÂ±ÄÂíåÊÄßÊ†ºÁâπË¥®</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    <span>Áî®ÂÖ´Â≠óÂëΩÁêÜËøõË°åÁ≤æÁ°ÆÁöÑÊó∂Èó¥È¢ÑÊµã</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    <span>‰∫íÁõ∏È™åËØÅÔºåÊèêÈ´òÈ¢ÑÊµãÁöÑÂáÜÁ°ÆÊÄß</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    <span>‰ªéÂ§öËßíÂ∫¶Ëé∑ÂæóÊõ¥ÂÖ®Èù¢ÁöÑ‰∫∫ÁîüÊåáÂØº</span>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
    
    {/* Disclaimer for English version */}
    {isEnglish && (
      <div className="mt-8 p-6 bg-gray-50 dark:bg-slate-800 rounded-lg border border-gray-200 dark:border-slate-600">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-slate-100 mb-3 font-rajdhani">
          Disclaimer
        </h3>
        <p className="text-sm text-gray-700 dark:text-slate-300 leading-relaxed font-rajdhani">
          This website shares information for learning and entertainment purposes only. Any advice here is just a suggestion and shouldn't be your sole guide for decisions. Your future rests in your hands, and it is your choices and actions that sculpt it. Use your judgment wisely and consult experts for major decisions.
        </p>
      </div>
    )}
    </SmartLayout>
  );
}

export default React.memo(ZiweiPage);