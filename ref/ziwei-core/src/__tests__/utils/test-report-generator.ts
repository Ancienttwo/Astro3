/**
 * 测试报告生成器
 * Test Report Generator for ZiWei Core
 */

import * as fs from 'fs'
import * as path from 'path'

interface TestResult {
  suite: string
  tests: {
    name: string
    status: 'passed' | 'failed' | 'skipped'
    duration: number
    error?: string
  }[]
  duration: number
  passed: number
  failed: number
  skipped: number
}

interface PerformanceMetric {
  name: string
  mean: number
  median: number
  p95: number
  p99: number
  min: number
  max: number
}

interface CoverageReport {
  lines: number
  branches: number
  functions: number
  statements: number
}

export class TestReportGenerator {
  private results: TestResult[] = []
  private performanceMetrics: PerformanceMetric[] = []
  private coverage?: CoverageReport
  private startTime: Date
  private endTime?: Date
  
  constructor() {
    this.startTime = new Date()
  }
  
  /**
   * 添加测试结果
   */
  addTestResult(result: TestResult): void {
    this.results.push(result)
  }
  
  /**
   * 添加性能指标
   */
  addPerformanceMetric(metric: PerformanceMetric): void {
    this.performanceMetrics.push(metric)
  }
  
  /**
   * 设置覆盖率报告
   */
  setCoverageReport(coverage: CoverageReport): void {
    this.coverage = coverage
  }
  
  /**
   * 生成Markdown格式的报告
   */
  generateMarkdownReport(): string {
    this.endTime = new Date()
    
    const report: string[] = []
    
    // 报告头部
    report.push('# 紫微斗数核心库测试报告')
    report.push(`# ZiWei Core Test Report`)
    report.push('')
    report.push(`**生成时间**: ${this.endTime.toLocaleString('zh-CN')}`)
    report.push(`**测试时长**: ${this.getTestDuration()}`)
    report.push('')
    
    // 执行摘要
    report.push('## 📊 执行摘要 (Executive Summary)')
    report.push('')
    report.push(this.generateSummaryTable())
    report.push('')
    
    // 测试覆盖率
    if (this.coverage) {
      report.push('## 📈 测试覆盖率 (Test Coverage)')
      report.push('')
      report.push(this.generateCoverageTable())
      report.push('')
    }
    
    // 性能指标
    if (this.performanceMetrics.length > 0) {
      report.push('## ⚡ 性能指标 (Performance Metrics)')
      report.push('')
      report.push(this.generatePerformanceTable())
      report.push('')
    }
    
    // 详细测试结果
    report.push('## 🧪 详细测试结果 (Detailed Test Results)')
    report.push('')
    
    this.results.forEach(suite => {
      report.push(`### ${suite.suite}`)
      report.push('')
      report.push(this.generateSuiteTable(suite))
      report.push('')
    })
    
    // 失败的测试
    const failedTests = this.getFailedTests()
    if (failedTests.length > 0) {
      report.push('## ❌ 失败的测试 (Failed Tests)')
      report.push('')
      failedTests.forEach(test => {
        report.push(`- **${test.suite}** > ${test.name}`)
        if (test.error) {
          report.push(`  - 错误: ${test.error}`)
        }
      })
      report.push('')
    }
    
    // 建议和下一步
    report.push('## 💡 建议与改进 (Recommendations)')
    report.push('')
    report.push(this.generateRecommendations())
    report.push('')
    
    // 页脚
    report.push('---')
    report.push('*Generated by ZiWei Core Test Report Generator*')
    
    return report.join('\n')
  }
  
  /**
   * 生成HTML格式的报告
   */
  generateHTMLReport(): string {
    this.endTime = new Date()
    
    const html: string[] = []
    
    html.push('<!DOCTYPE html>')
    html.push('<html lang="zh-CN">')
    html.push('<head>')
    html.push('  <meta charset="UTF-8">')
    html.push('  <meta name="viewport" content="width=device-width, initial-scale=1.0">')
    html.push('  <title>紫微斗数核心库测试报告</title>')
    html.push('  <style>')
    html.push(this.getHTMLStyles())
    html.push('  </style>')
    html.push('</head>')
    html.push('<body>')
    html.push('  <div class="container">')
    
    // 标题
    html.push('    <h1>紫微斗数核心库测试报告</h1>')
    html.push(`    <p class="subtitle">生成时间: ${this.endTime.toLocaleString('zh-CN')}</p>`)
    
    // 摘要卡片
    html.push('    <div class="summary-cards">')
    html.push(this.generateSummaryCards())
    html.push('    </div>')
    
    // 测试覆盖率图表
    if (this.coverage) {
      html.push('    <section class="coverage">')
      html.push('      <h2>测试覆盖率</h2>')
      html.push(this.generateCoverageChart())
      html.push('    </section>')
    }
    
    // 性能指标
    if (this.performanceMetrics.length > 0) {
      html.push('    <section class="performance">')
      html.push('      <h2>性能指标</h2>')
      html.push(this.generatePerformanceChart())
      html.push('    </section>')
    }
    
    // 测试结果详情
    html.push('    <section class="test-results">')
    html.push('      <h2>测试结果详情</h2>')
    this.results.forEach(suite => {
      html.push(this.generateSuiteHTML(suite))
    })
    html.push('    </section>')
    
    html.push('  </div>')
    html.push('</body>')
    html.push('</html>')
    
    return html.join('\n')
  }
  
  /**
   * 保存报告到文件
   */
  saveReport(outputPath: string, format: 'markdown' | 'html' = 'markdown'): void {
    const content = format === 'markdown' 
      ? this.generateMarkdownReport()
      : this.generateHTMLReport()
    
    const extension = format === 'markdown' ? '.md' : '.html'
    const fileName = `test-report-${Date.now()}${extension}`
    const filePath = path.join(outputPath, fileName)
    
    fs.writeFileSync(filePath, content, 'utf-8')
    console.log(`测试报告已保存到: ${filePath}`)
  }
  
  // 私有辅助方法
  
  private getTestDuration(): string {
    if (!this.endTime) return 'N/A'
    const duration = this.endTime.getTime() - this.startTime.getTime()
    const seconds = Math.floor(duration / 1000)
    const minutes = Math.floor(seconds / 60)
    const hours = Math.floor(minutes / 60)
    
    if (hours > 0) {
      return `${hours}小时 ${minutes % 60}分钟 ${seconds % 60}秒`
    } else if (minutes > 0) {
      return `${minutes}分钟 ${seconds % 60}秒`
    } else {
      return `${seconds}秒`
    }
  }
  
  private generateSummaryTable(): string {
    const total = this.results.reduce((acc, r) => ({
      tests: acc.tests + r.tests.length,
      passed: acc.passed + r.passed,
      failed: acc.failed + r.failed,
      skipped: acc.skipped + r.skipped
    }), { tests: 0, passed: 0, failed: 0, skipped: 0 })
    
    const passRate = ((total.passed / total.tests) * 100).toFixed(2)
    
    return `| 指标 | 数值 |
|------|------|
| 总测试数 | ${total.tests} |
| 通过 | ${total.passed} ✅ |
| 失败 | ${total.failed} ❌ |
| 跳过 | ${total.skipped} ⏭️ |
| 通过率 | ${passRate}% |
| 测试套件数 | ${this.results.length} |`
  }
  
  private generateCoverageTable(): string {
    if (!this.coverage) return ''
    
    return `| 类型 | 覆盖率 |
|------|--------|
| 行覆盖率 | ${this.coverage.lines}% |
| 分支覆盖率 | ${this.coverage.branches}% |
| 函数覆盖率 | ${this.coverage.functions}% |
| 语句覆盖率 | ${this.coverage.statements}% |`
  }
  
  private generatePerformanceTable(): string {
    const rows = this.performanceMetrics.map(metric => 
      `| ${metric.name} | ${metric.mean.toFixed(2)}ms | ${metric.median.toFixed(2)}ms | ${metric.p95.toFixed(2)}ms | ${metric.p99.toFixed(2)}ms |`
    )
    
    return `| 测试项 | 平均值 | 中位数 | P95 | P99 |
|--------|--------|--------|-----|-----|
${rows.join('\n')}`
  }
  
  private generateSuiteTable(suite: TestResult): string {
    const rows = suite.tests.map(test => {
      const status = test.status === 'passed' ? '✅' 
        : test.status === 'failed' ? '❌' 
        : '⏭️'
      return `| ${test.name} | ${status} | ${test.duration.toFixed(2)}ms |`
    })
    
    return `| 测试名称 | 状态 | 耗时 |
|----------|------|------|
${rows.join('\n')}

**套件统计**: 通过 ${suite.passed} | 失败 ${suite.failed} | 跳过 ${suite.skipped} | 总耗时 ${suite.duration.toFixed(2)}ms`
  }
  
  private getFailedTests() {
    const failed: any[] = []
    this.results.forEach(suite => {
      suite.tests.forEach(test => {
        if (test.status === 'failed') {
          failed.push({
            suite: suite.suite,
            name: test.name,
            error: test.error
          })
        }
      })
    })
    return failed
  }
  
  private generateRecommendations(): string {
    const recommendations: string[] = []
    
    // 基于覆盖率的建议
    if (this.coverage) {
      if (this.coverage.lines < 80) {
        recommendations.push('- 📝 行覆盖率低于80%，建议增加更多单元测试')
      }
      if (this.coverage.branches < 70) {
        recommendations.push('- 🌿 分支覆盖率低于70%，建议覆盖更多条件分支')
      }
    }
    
    // 基于性能的建议
    const slowTests = this.performanceMetrics.filter(m => m.p95 > 100)
    if (slowTests.length > 0) {
      recommendations.push(`- ⚡ ${slowTests.length}个测试的P95响应时间超过100ms，建议优化`)
    }
    
    // 基于失败测试的建议
    const failedCount = this.getFailedTests().length
    if (failedCount > 0) {
      recommendations.push(`- 🔧 有${failedCount}个测试失败，需要立即修复`)
    }
    
    if (recommendations.length === 0) {
      recommendations.push('- ✨ 测试结果良好，继续保持！')
    }
    
    return recommendations.join('\n')
  }
  
  private getHTMLStyles(): string {
    return `
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      }
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: white;
        min-height: 100vh;
      }
      h1 {
        color: #2d3748;
        border-bottom: 3px solid #667eea;
        padding-bottom: 10px;
      }
      .subtitle {
        color: #718096;
        font-size: 14px;
      }
      .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin: 30px 0;
      }
      .card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      .card h3 {
        margin: 0 0 10px 0;
        font-size: 14px;
        opacity: 0.9;
      }
      .card .value {
        font-size: 32px;
        font-weight: bold;
      }
      .card .unit {
        font-size: 14px;
        opacity: 0.9;
      }
      section {
        margin: 40px 0;
      }
      h2 {
        color: #2d3748;
        border-left: 4px solid #667eea;
        padding-left: 10px;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
      }
      th {
        background: #f7fafc;
        padding: 12px;
        text-align: left;
        border-bottom: 2px solid #e2e8f0;
      }
      td {
        padding: 12px;
        border-bottom: 1px solid #e2e8f0;
      }
      .passed { color: #48bb78; }
      .failed { color: #f56565; }
      .skipped { color: #ed8936; }
      .coverage-bar {
        background: #e2e8f0;
        border-radius: 4px;
        height: 20px;
        overflow: hidden;
        margin: 5px 0;
      }
      .coverage-fill {
        height: 100%;
        background: linear-gradient(90deg, #48bb78 0%, #38a169 100%);
        transition: width 0.3s ease;
      }
    `
  }
  
  private generateSummaryCards(): string {
    const total = this.results.reduce((acc, r) => ({
      tests: acc.tests + r.tests.length,
      passed: acc.passed + r.passed,
      failed: acc.failed + r.failed,
      skipped: acc.skipped + r.skipped
    }), { tests: 0, passed: 0, failed: 0, skipped: 0 })
    
    const passRate = ((total.passed / total.tests) * 100).toFixed(1)
    
    return `
      <div class="card">
        <h3>总测试数</h3>
        <div class="value">${total.tests}</div>
      </div>
      <div class="card">
        <h3>通过率</h3>
        <div class="value">${passRate}<span class="unit">%</span></div>
      </div>
      <div class="card">
        <h3>通过</h3>
        <div class="value passed">${total.passed}</div>
      </div>
      <div class="card">
        <h3>失败</h3>
        <div class="value failed">${total.failed}</div>
      </div>
    `
  }
  
  private generateCoverageChart(): string {
    if (!this.coverage) return ''
    
    return `
      <div class="coverage-chart">
        <div class="coverage-item">
          <div class="coverage-label">行覆盖率</div>
          <div class="coverage-bar">
            <div class="coverage-fill" style="width: ${this.coverage.lines}%"></div>
          </div>
          <div class="coverage-value">${this.coverage.lines}%</div>
        </div>
        <div class="coverage-item">
          <div class="coverage-label">分支覆盖率</div>
          <div class="coverage-bar">
            <div class="coverage-fill" style="width: ${this.coverage.branches}%"></div>
          </div>
          <div class="coverage-value">${this.coverage.branches}%</div>
        </div>
        <div class="coverage-item">
          <div class="coverage-label">函数覆盖率</div>
          <div class="coverage-bar">
            <div class="coverage-fill" style="width: ${this.coverage.functions}%"></div>
          </div>
          <div class="coverage-value">${this.coverage.functions}%</div>
        </div>
        <div class="coverage-item">
          <div class="coverage-label">语句覆盖率</div>
          <div class="coverage-bar">
            <div class="coverage-fill" style="width: ${this.coverage.statements}%"></div>
          </div>
          <div class="coverage-value">${this.coverage.statements}%</div>
        </div>
      </div>
    `
  }
  
  private generatePerformanceChart(): string {
    const rows = this.performanceMetrics.map(metric => `
      <tr>
        <td>${metric.name}</td>
        <td>${metric.mean.toFixed(2)}ms</td>
        <td>${metric.median.toFixed(2)}ms</td>
        <td>${metric.p95.toFixed(2)}ms</td>
        <td>${metric.p99.toFixed(2)}ms</td>
        <td>${metric.min.toFixed(2)}ms</td>
        <td>${metric.max.toFixed(2)}ms</td>
      </tr>
    `).join('')
    
    return `
      <table>
        <thead>
          <tr>
            <th>测试项</th>
            <th>平均值</th>
            <th>中位数</th>
            <th>P95</th>
            <th>P99</th>
            <th>最小值</th>
            <th>最大值</th>
          </tr>
        </thead>
        <tbody>
          ${rows}
        </tbody>
      </table>
    `
  }
  
  private generateSuiteHTML(suite: TestResult): string {
    const rows = suite.tests.map(test => {
      const statusClass = test.status
      const statusIcon = test.status === 'passed' ? '✅' 
        : test.status === 'failed' ? '❌' 
        : '⏭️'
      
      return `
        <tr>
          <td>${test.name}</td>
          <td class="${statusClass}">${statusIcon} ${test.status}</td>
          <td>${test.duration.toFixed(2)}ms</td>
        </tr>
      `
    }).join('')
    
    return `
      <div class="test-suite">
        <h3>${suite.suite}</h3>
        <table>
          <thead>
            <tr>
              <th>测试名称</th>
              <th>状态</th>
              <th>耗时</th>
            </tr>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>
        <p class="suite-summary">
          通过: <span class="passed">${suite.passed}</span> | 
          失败: <span class="failed">${suite.failed}</span> | 
          跳过: <span class="skipped">${suite.skipped}</span> | 
          总耗时: ${suite.duration.toFixed(2)}ms
        </p>
      </div>
    `
  }
}

// 导出使用示例
export function generateTestReport() {
  const generator = new TestReportGenerator()
  
  // 添加测试结果示例
  generator.addTestResult({
    suite: '宫位关系测试',
    tests: [
      { name: '三合宫计算', status: 'passed', duration: 0.5 },
      { name: '四正宫计算', status: 'passed', duration: 0.3 },
      { name: '本体宫计算', status: 'passed', duration: 0.4 }
    ],
    duration: 1.2,
    passed: 3,
    failed: 0,
    skipped: 0
  })
  
  // 添加性能指标示例
  generator.addPerformanceMetric({
    name: '命盘计算',
    mean: 45.2,
    median: 42.0,
    p95: 78.5,
    p99: 95.2,
    min: 28.1,
    max: 112.3
  })
  
  // 设置覆盖率
  generator.setCoverageReport({
    lines: 85,
    branches: 78,
    functions: 92,
    statements: 87
  })
  
  // 生成并保存报告
  const outputPath = path.join(__dirname, '../../../reports')
  generator.saveReport(outputPath, 'markdown')
  generator.saveReport(outputPath, 'html')
}